{
  "openapi": "3.1.0",
  "servers": [
    {
      "description": "Production",
      "url": "https://api.codat.io"
    }
  ],
  "info": {
    "title": "Codat webhook event types",
    "description": "Codat's webhook event types",
    "version": "3.0.0",
    "contact": {
      "name": "Codat",
      "email": "support@codat.io"
    },
    "termsOfService": "https://www.codat.io/legals/"
  },
  "security": [
    {
      "auth_header": []
    }
  ],
  "x-speakeasy-retries": {
    "strategy": "backoff",
    "backoff": {
      "initialInterval": 500,
      "maxInterval": 60000,
      "maxElapsedTime": 3600000,
      "exponent": 1.5
    },
    "statusCodes": [
      408,
      429,
      "5XX"
    ],
    "retryConnectionErrors": true
  },
  "tags": [],
  "paths": {},
  "webhooks": {
    "company.created": {
      "post": {
        "description": "Triggered when a company is created in Codat.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "company.deleted": {
      "post": {
        "description": "Triggered when a company is deleted in Codat.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "connection.created": {
      "post": {
        "description": "Triggered when a connection is created by the SMB.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "connection.connected": {
      "post": {
        "description": "Triggered when a connection is successfully linked by the SMB.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "connection.disconnected": {
      "post": {
        "description": "Triggered when a connection is disconnected either due to being unlinked or de-authorized by the SMB or integration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "connection.reconnected": {
      "post": {
        "description": "Triggered when a connection is reconnected after becoming disconnected.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "connection.deleted": {
      "post": {
        "description": "Triggered when a connection is deleted.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "DataConnectionStatusChanged": {
      "post": {
        "deprecated": true,
        "description": "Triggered when a data connection status of a specific company changes.\n\nThis event type has been deprecated. Subscribe to the following event types instead:\n\n- `connection.created`\n- `connection.connected`\n- `connection.disconnected`\n- `connection.reconnected`\n- `connection.deleted`",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionStatusChangedWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "NewCompanySynchronized": {
      "post": {
        "description": "Triggered when initial syncs are complete for all data types queued for a newly connected company, and at least one of those syncs is successful.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCompanySynchronizedWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "read.completed": {
      "post": {
        "description": "Called when the fetch of data types for a product has completed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadCompletedWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "read.completed.initial": {
      "post": {
        "description": "Called when the initial fetch of data types for a product has been completed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadCompletedWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "DataSyncCompleted": {
      "post": {
        "deprecated": true,
        "description": "Generated for each data type to indicate that data synchronization is successfully completed for that specific data type.\n\nThis event type has been deprecated. To replicate it, use the `read.completed` webhook and check if `payload.dataTypes[].status` is set to `Success` for all data types in the array.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSyncCompletedWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "DatasetDataChanged": {
      "post": {
        "deprecated": true,
        "description": "Generated for each data type to indicate that dataset synchronization has completed and updated Codat's data cache through the creation of new records or a change to existing records.\n\nThis event type has been deprecated. To replicate it, use the `read.completed` webhook and verify that `payload.dataTypes[].status` is set to `Success` and `payload.dataTypes[].modifiedRecords` is `True` for any data type in the array.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetDataChangedWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "DataSyncStatusChangedToError": {
      "post": {
        "deprecated": true,
        "description": "Indicates that the synchronization of a dataset failed.\n\nThis event type has been deprecated.\nTo replicate it, use the `read.completed` webhook and check if `payload.dataTypes[].status` is set to any of the following statuses for any data type in the array:\n\n- `FetchError`\n- `MapError`\n- `InternalError`\n- `ProcessingError`\n- `ValidationError`\n- `AuthError`\n- `RateLimitError`\n- `PermissionsError`\n- `PrerequisiteNotMet`",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetStatusChangedErrorWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "PushOperationStatusChanged": {
      "post": {
        "deprecated": true,
        "description": "Indicates that a create, update, or delete operation's status has changed.\n\nThis event type has been deprecated. Use either the `{dataType}.write.successful` or `{dataType}.write.unsuccessful` instead.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushOperationStatusChangedWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "PushOperationTimedOut": {
      "post": {
        "deprecated": true,
        "description": "Indicates that a create, update, or delete operation has timed out.\n\nThis event type has been deprecated.\nTo replicate it, use the `{dataType}.write.unsuccessful` webhook and check if `payload.status` is set to `TimedOut`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushOperationTimedOutWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "AccountCategoriesUpdated": {
      "post": {
        "description": "Triggered anytime a company's accounts are categorized. This can be when Codat updates the suggested category fields or a user updates the confirmed category fields.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCategoriesUpdatedWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "SyncConnectionDeleted": {
      "post": {
        "description": "Indicates a Sync for Commerce connection has been deleted. Used for Sync for Commerce only.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncConnectionDeletedWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "expenses.sync.successful": {
      "post": {
        "description": "Triggered when an expense sync successfully completes without any errors or warnings.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpensesSyncWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "expenses.sync.unsuccessful": {
      "post": {
        "description": "Triggered when an expense sync fails to complete successfully, resulting in at least one error or warning.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpensesSyncWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "SyncCompleted": {
      "post": {
        "deprecated": true,
        "description": "Triggered anytime an expense sync completes. Used for Sync for Expenses only.\n\n> This event type is deprecated. Use the `expenses.sync.successful` to get notified when an expense sync completes successfully.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncCompleteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "SyncFailed": {
      "post": {
        "deprecated": true,
        "description": "Indicates a failure occurred during an expense sync. Used for Sync for Expenses only.\n\n> This event type is deprecated. Use the `expenses.sync.unsuccessful` to get notified when an expense sync completes unsuccessfully.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncFailedWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "bankFeeds.sourceAccount.connected": {
      "post": {
        "description": "Indicates a bank feed source account has changed to a status of connected.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceAccountWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "bankFeeds.sourceAccount.disconnected": {
      "post": {
        "description": "Indicates a bank feed source account has changed to a status of disconnected.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceAccountWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "bills.write.successful": {
      "post": {
        "description": "Indicates that a bill has been successfully created, updated, deleted, or had an attachment uploaded in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "bills.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create, update, delete a bill, or upload an attachment to a bill in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "bankTransactions.write.successful": {
      "post": {
        "description": "Indicates that bank transactions have been successfully created in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "bankTransactions.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create bank transactions in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "items.write.successful": {
      "post": {
        "description": "Indicates that an item has been successfully created in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "items.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create an item in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "suppliers.write.successful": {
      "post": {
        "description": "Indicates that a supplier has been successfully created or updated in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "suppliers.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create or update a supplier in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "directCosts.write.successful": {
      "post": {
        "description": "Indicates that a direct cost has been successfully created or deleted, or had an attachment uploaded in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "directCosts.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create or delete a direct cost, or upload an attachment to a direct cost in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "invoices.write.successful": {
      "post": {
        "description": "Indicates that an invoice has been successfully created, updated, deleted, or had an attachment uploaded in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "invoices.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create, update, delete an invoice, or upload an attachment to an invoice in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "bankAccounts.write.successful": {
      "post": {
        "description": "Indicates that a bank account has been successfully created or updated in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "bankAccounts.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create or update a bank account in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "purchaseOrders.write.successful": {
      "post": {
        "description": "Indicates that a purchase order has been successfully created or updated in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "purchaseOrders.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create or update a purchase order in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "billPayments.write.successful": {
      "post": {
        "description": "Indicates that a bill payment has been successfully created or deleted in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "billPayments.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create or delete a bill payment in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "directIncomes.write.successful": {
      "post": {
        "description": "Indicates that a direct income has been successfully created or had an attachment uploaded in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "directIncomes.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create or upload an attachment to a direct income in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "journalEntries.write.successful": {
      "post": {
        "description": "Indicates that a journal entry has been successfully created or deleted in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "journalEntries.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create or delete a journal entry in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "chartOfAccounts.write.successful": {
      "post": {
        "description": "Indicates that an account has been successfully created in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "chartOfAccounts.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create an account in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "billCreditNotes.write.successful": {
      "post": {
        "description": "Indicates that a bill credit note has been successfully created, updated, or had an attachment uploaded in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "billCreditNotes.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create, update a bill credit note, or upload an attachment to a bill credit note in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "creditNotes.write.successful": {
      "post": {
        "description": "Indicates that a credit note has been successfully created or updated in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "creditNotes.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create or update a credit note in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "customers.write.successful": {
      "post": {
        "description": "Indicates that a customer has been successfully created or updated in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "customers.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create or update a customer in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "journals.write.successful": {
      "post": {
        "description": "Indicates that a journal has been successfully created in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "journals.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create a journal in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "transfers.write.successful": {
      "post": {
        "description": "Indicates that a transfer has been successfully created or had an attachment uploaded in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "transfers.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create a transfer, or upload an attachment to a transfer in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "payments.write.successful": {
      "post": {
        "description": "Indicates that a payment has been successfully created in the accounting software.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "payments.write.unsuccessful": {
      "post": {
        "description": "Indicates that an attempt to create a payment in the accounting software has been unsuccessful.\n\nCodat now refers to push operations as write requests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received."
          }
        }
      }
    },
    "client.rateLimit.reached": {
      "post": {
        "description": "Called when your client’s request count to Codat's API surpasses the allocated quota.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRateLimitWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "client.rateLimit.reset": {
      "post": {
        "description": "Called when your client's rate limit quota is reset, allowing additional requests to Codat's API.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRateLimitWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "ClientRateLimitReached": {
      "post": {
        "deprecated": true,
        "description": "Called when your client’s requests to Codat's API exceed the allocated quota. \n\n**Note: This event type is deprecated. Developers should now use the `client.rateLimit.reached` event for handling rate limit notifications.**",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRateLimitReachedWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "ClientRateLimitReset": {
      "post": {
        "deprecated": true,
        "description": "Called when the rate limit quota has reset for the client, and more requests to Codat's API are available.\n\nNote: This event type is deprecated. Developers should now use the `client.rateLimit.reset` event for handling rate limit notifications.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRateLimitResetWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    },
    "reports.categorizedBankStatement.generate.successful": {
      "post": {
        "description": "Called when a categorized bank statement is successfully generated for a company.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportGenerationWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the webhook was received successfully."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountCategoriesUpdatedWebhook": {
        "title": "Account categories updated webhook",
        "description": "Webhook request body for the \"Account categories updated\" event.",
        "x-internal": true,
        "type": "object",
        "properties": {
          "ClientId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientId"
          },
          "ClientName": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientName"
          },
          "CompanyId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/CompanyId"
          },
          "DataConnectionId": {
            "$ref": "#/components/schemas/Connection/properties/id"
          },
          "RuleId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleId"
          },
          "RuleType": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleType"
          },
          "AlertId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/AlertId"
          },
          "Message": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/Message"
          },
          "Data": {
            "$ref": "#/components/schemas/AccountCategoriesUpdatedWebhook/definitions/AccountCategoriesUpdatedWebhookData"
          }
        },
        "definitions": {
          "AccountCategoriesUpdatedWebhookData": {
            "type": "object",
            "title": "Account categories updated webhook data",
            "properties": {
              "modifiedDate": {
                "description": "The date on which the company's account categories were last modified in Codat.",
                "title": "Date",
                "type": "string",
                "example": "2022-10-23"
              }
            }
          }
        },
        "examples": [
          {
            "ClientId": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "ClientName": "Bank of Dave",
            "CompanyId": "8a210b68-6988-11ed-a1eb-0242ac120002",
            "DataConnectionId": "2e9d2c44-f675-40ba-8049-353bfcb5e171",
            "RuleId": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
            "RuleType": "Account Categories Updated",
            "AlertId": "a9367074-b5c3-42c4-9be4-be129f43577e",
            "Message": "Account categories updated for company f1c35bdc-1546-41b9-baf4-3f31135af968.",
            "Data": {
              "modifiedDate": "2019-08-24T14:15:22Z"
            }
          }
        ]
      },
      "ClientRateLimitReachedWebhook": {
        "title": "Client rate limit reached webhook",
        "x-internal": true,
        "description": "Webhook request body for a client that has reached their rate limit.",
        "type": "object",
        "properties": {
          "ClientId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientId"
          },
          "ClientName": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientName"
          },
          "RuleId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleId"
          },
          "RuleType": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleType"
          },
          "AlertId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/AlertId"
          },
          "Message": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/Message"
          },
          "Data": {
            "$ref": "#/components/schemas/ClientRateLimitReachedWebhook/definitions/ClientRateLimitReachedWebhookData"
          }
        },
        "definitions": {
          "ClientRateLimitReachedWebhookData": {
            "type": "object",
            "title": "Client rate limit reached webhook data",
            "properties": {
              "DailyQuota": {
                "type": "integer",
                "description": "The number of available requests per day."
              },
              "ExpiresUtc": {
                "$ref": "#/components/schemas/Connection/properties/created",
                "description": "The date time in UTC when your daily quota is reset."
              }
            }
          }
        },
        "examples": [
          {
            "ClientId": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "ClientName": "Bank of Dave",
            "RuleId": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
            "RuleType": "Rate Limit Reached",
            "AlertId": "a9367074-b5c3-42c4-9be4-be129f43577e",
            "Message": "The current daily rate limit quota of 1000 requests for bae71d36-ff47-420a-b4a6-f8c9ddf41140 has been reached.",
            "Data": {
              "DailyQuota": 1000,
              "ExpiresUtc": "2023-05-03T00:00:00Z"
            }
          }
        ]
      },
      "ClientRateLimitResetWebhook": {
        "title": "Client rate limit reset webhook",
        "x-internal": true,
        "description": "Webhook request body for a client that has had their rate limit reset.",
        "type": "object",
        "properties": {
          "ClientId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientId"
          },
          "ClientName": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientName"
          },
          "RuleId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleId"
          },
          "RuleType": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleType"
          },
          "AlertId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/AlertId"
          },
          "Message": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/Message"
          },
          "Data": {
            "$ref": "#/components/schemas/ClientRateLimitResetWebhook/definitions/ClientRateLimitResetWebhookData"
          }
        },
        "definitions": {
          "ClientRateLimitResetWebhookData": {
            "type": "object",
            "title": "Client rate limit reset webhook data",
            "properties": {
              "QuotaRemaining": {
                "type": "integer",
                "description": "Total number of requests remaining for your client.",
                "nullable": true
              },
              "ResetReason": {
                "type": "string",
                "description": "The reason for your rate limit quota being reset."
              },
              "DailyQuota": {
                "$ref": "#/components/schemas/ClientRateLimitReachedWebhook/definitions/ClientRateLimitReachedWebhookData/properties/DailyQuota",
                "nullable": true
              },
              "ExpiresUtc": {
                "$ref": "#/components/schemas/ClientRateLimitReachedWebhook/definitions/ClientRateLimitReachedWebhookData/properties/ExpiresUtc",
                "nullable": true
              }
            }
          }
        },
        "examples": [
          {
            "ClientId": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "ClientName": "Bank of Dave",
            "RuleId": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
            "RuleType": "Rate Limit Reset",
            "AlertId": "a9367074-b5c3-42c4-9be4-be129f43577e",
            "Message": "The current daily rate limit quota for client 30e0f9d2-52c0-4c9f-a806-bcd98a3bcd7e has been reset to 1000 requests.",
            "Data": {
              "QuotaRemaining": 1000,
              "ResetReason": "The quota was reset because it is a new day.",
              "DailyQuota": 1000,
              "ExpiresUtc": "2023-05-03T00:00:00Z"
            }
          }
        ]
      },
      "ClientRateLimitWebhook": {
        "title": "Client rate limit webhook",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "743ec94a-8aa4-44bb-8bd4-e1855ee0e74b",
            "description": "Unique identifier of the event."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event.",
            "examples": [
              "client.rateLimit.reset",
              "client.rateLimit.reached"
            ]
          },
          "generatedDate": {
            "$ref": "#/components/schemas/Connection/properties/created",
            "description": "The date time in UTC the event was generated in Codat."
          },
          "payload": {
            "$ref": "#/components/schemas/ClientRateLimitWebhook/definitions/clientRateLimitWebhookPayload"
          }
        },
        "definitions": {
          "clientRateLimitWebhookPayload": {
            "title": "Client rate limit webhook payload",
            "type": "object",
            "properties": {
              "dailyQuota": {
                "type": "integer",
                "description": "The number of available requests per day."
              },
              "quotaRemaining": {
                "type": "integer",
                "description": "Total number of requests remaining for your client."
              },
              "expiryDate": {
                "$ref": "#/components/schemas/Connection/properties/created",
                "description": "The date time in UTC when your daily quota is reset."
              }
            }
          }
        },
        "examples": [
          {
            "id": "743ec94a-8aa4-44bb-8bd4-e1855ee0e74b",
            "eventType": "client.rateLimit.reset",
            "generatedDate": "2024-09-01T00:00:00Z",
            "payload": {
              "dailyQuota": 12000,
              "quotaRemaining": 11993,
              "expiryDate": "2024-09-01T23:59:99Z"
            }
          },
          {
            "id": "743ec94a-8aa4-44bb-8bd4-e1855ee0e74b",
            "eventType": "client.rateLimit.reached",
            "generatedDate": "2024-09-01T00:00:00Z",
            "payload": {
              "dailyQuota": 12000,
              "quotaRemaining": 0,
              "expiryDate": "2024-09-01T12:14:14Z"
            }
          }
        ]
      },
      "Company": {
        "title": "Company",
        "description": "﻿In Codat, a company represents a business sharing access to their data. Each company can have multiple [connections](https://docs.codat.io/DOCS_PATH#/schemas/Connection) to different data sources such as one connection to [Xero](https://docs.codat.io/integrations/accounting/xero/accounting-xero) for accounting data, two connections to [Plaid](https://docs.codat.io/integrations/banking/plaid/banking-plaid) for two bank accounts and a connection to [Zettle](https://docs.codat.io/integrations/commerce/zettle/commerce-zettle) for POS data.\n\nTypically each company is one of your customers.\n\nWhen you create a company, you can specify a `name` and we will automatically generate a unique `id` for the company. You can also add a `description` to store any additional information about the company.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Company/definitions/companyDetails"
          },
          {
            "type": "object",
            "properties": {
              "dataConnections": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          }
        ],
        "definitions": {
          "companyDetails": {
            "title": "Company details",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/SyncFailedWebhook/properties/CompanyId"
              },
              "name": {
                "type": "string",
                "description": "The name of the company",
                "example": "Codat Ltd."
              },
              "description": {
                "nullable": true,
                "type": "string",
                "example": "Requested early access to the new financing scheme.",
                "description": "Additional information about the company. This can be used to store foreign IDs, references, etc."
              },
              "redirect": {
                "type": "string",
                "format": "uri",
                "description": "The `redirect` [Link URL](https://docs.codat.io/auth-flow/authorize-hosted-link) enabling the customer to start their auth flow journey for the company.",
                "example": "https://link.codat.io/company/27628208-459c-46a2-a705-5641ce25f739"
              },
              "lastSync": {
                "$ref": "#/components/schemas/Connection/properties/created",
                "nullable": true
              },
              "created": {
                "$ref": "#/components/schemas/Connection/properties/created"
              },
              "createdByUserName": {
                "type": "string",
                "description": "Name of user that created the company in Codat.",
                "nullable": true
              },
              "products": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of products that are currently enabled for the company."
              },
              "tags": {
                "type": "object",
                "maxProperties": 10,
                "propertyNames": {
                  "pattern": "^.{1,27}$"
                },
                "additional properties": {
                  "type": "string",
                  "maxLength": 100
                },
                "description": "A collection of user-defined key-value pairs that store custom metadata against the company."
              }
            },
            "required": [
              "id",
              "name",
              "redirect"
            ]
          },
          "companyReference": {
            "title": "Company reference",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/SyncFailedWebhook/properties/CompanyId"
              },
              "name": {
                "$ref": "#/components/schemas/Company/definitions/companyDetails/properties/name"
              },
              "description": {
                "$ref": "#/components/schemas/Company/definitions/companyDetails/properties/description"
              },
              "links": {
                "type": "object",
                "description": "A collection of links for the company.",
                "properties": {
                  "portal": {
                    "type": "string",
                    "format": "uri",
                    "description": "Link to the company page in the portal."
                  }
                }
              },
              "tags": {
                "$ref": "#/components/schemas/Company/definitions/companyDetails/properties/tags"
              }
            }
          }
        },
        "examples": [
          {
            "id": "0498e921-9b53-4396-a412-4f2f5983b0a2",
            "name": "string",
            "redirect": "https://link.codat.io/company/27628208-459c-46a2-a705-5641ce25f739",
            "lastSync": "2022-01-01T12:00:00.000Z",
            "created": "2022-01-01T12:00:00.000Z",
            "createdByUserName": "string",
            "tags": {
              "region": "us",
              "uid": "f6b0c253-16c7-4da1-a0c5-9c871e9c9d6c"
            },
            "dataConnections": [
              {
                "id": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd",
                "integrationId": "bf083d72-62c7-493e-aec9-81b4dbba7e2c",
                "integrationKey": "dfxm",
                "sourceId": "bdd831ce-eebd-4896-89a7-20e5ee8989ee",
                "platformName": "Basiq",
                "linkUrl": "https://link-api.codat.io/companies/86bd88cb-44ab-4dfb-b32f-87b19b14287f/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start",
                "status": "Linked",
                "lastSync": "2022-10-27T10:22:43.6464237Z",
                "created": "2022-10-27T09:53:29Z",
                "sourceType": "Banking"
              }
            ]
          }
        ]
      },
      "CompanyWebhook": {
        "title": "Company webhook",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "description": "Unique identifier of the event"
          },
          "eventType": {
            "type": "string",
            "description": "The type of event.",
            "examples": [
              "company.created",
              "company.deleted"
            ]
          },
          "generatedDate": {
            "$ref": "#/components/schemas/Connection/properties/created",
            "description": "The date time in UTC the event was generated in Codat."
          },
          "payload": {
            "$ref": "#/components/schemas/Company/definitions/companyDetails"
          }
        },
        "examples": [
          {
            "id": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "type": "company.created",
            "generatedDate": "2024-08-08T17:10:34.015Z",
            "payload": {
              "id": "0498e921-9b53-4396-a412-4f2f5983b0a2",
              "name": "Bank of Dave",
              "description": "Requested a loan for refurb.",
              "redirect": "https://link.codat.io/company/0498e921-9b53-4396-a412-4f2f5983b0a2",
              "lastSync": "2022-01-01T12:00:00.000Z",
              "created": "2022-01-01T12:00:00.000Z",
              "tags": {
                "customerRegion": "us",
                "uid": "335a086e-8563-4b03-94e3-39544225ecb6"
              }
            }
          },
          {
            "id": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "type": "company.deleted",
            "generatedDate": "2024-08-08T17:10:34.015Z",
            "payload": {
              "id": "0498e921-9b53-4396-a412-4f2f5983b0a2",
              "name": "Bank of Dave",
              "description": "Requested a loan for refurb.",
              "redirect": "https://link.codat.io/company/0498e921-9b53-4396-a412-4f2f5983b0a2",
              "lastSync": "2022-01-01T12:00:00.000Z",
              "created": "2022-01-01T12:00:00.000Z",
              "tags": {
                "customerRegion": "uk",
                "uid": "f6b0c253-16c7-4da1-a0c5-9c871e9c9d6c"
              }
            }
          }
        ]
      },
      "Connection": {
        "title": "Connection",
        "description": "﻿A connection represents a [company's](https://docs.codat.io/DOCS_PATH#/schemas/Company) connection to a data source and allows you to synchronize data (pull and/or push) with that source.\n\nA company can have multiple data connections depending on the type of data source it is connecting to. For example, a single company can link to:\n\n- [Accounting data](https://docs.codat.io/accounting-api/overview) - 1 active connection.\n- [Banking data](https://docs.codat.io/banking-api/overview) - Multiple active connections.\n- [Commerce data](https://docs.codat.io/commerce-api/overview) - Multiple active connections.\nAny combination of accounting, banking, and commerce data connections is allowed.\n\nBefore you can use a data connection to pull or push data, the company must grant you access to their business data by [linking the connection](https://docs.codat.io/auth-flow/overview).",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "2e9d2c44-f675-40ba-8049-353bfcb5e171",
            "description": "Unique identifier for a company's data connection."
          },
          "integrationId": {
            "type": "string",
            "format": "uuid",
            "example": "fd321cb6-7963-4506-b873-e99593a45e30",
            "description": "A Codat ID representing the integration."
          },
          "integrationKey": {
            "type": "string",
            "description": "A unique four-character ID that identifies the platform of the company's data connection. This ensures continuity if the platform changes its name in the future."
          },
          "sourceId": {
            "type": "string",
            "format": "uuid",
            "example": "35b92968-9851-4095-ad60-395c95cbcba4",
            "description": "A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`."
          },
          "sourceType": {
            "title": "Source Type",
            "description": "The type of platform of the connection.",
            "type": "string",
            "enum": [
              "Accounting",
              "Banking",
              "BankFeed",
              "Commerce",
              "Expense",
              "Other",
              "Unknown"
            ],
            "example": "Accounting"
          },
          "platformName": {
            "type": "string",
            "description": "Name of integration connected to company."
          },
          "linkUrl": {
            "type": "string",
            "format": "uri",
            "description": "The link URL your customers can use to authorize access to their business application.",
            "example": "https://link-api.codat.io/companies/86bd88cb-44ab-4dfb-b32f-87b19b14287f/connections/2e2eb431-c1fa-4dc9-93fa-d29781c12bcd/start"
          },
          "status": {
            "$ref": "#/components/schemas/Connection/definitions/dataConnectionStatus"
          },
          "lastSync": {
            "$ref": "#/components/schemas/Connection/properties/created",
            "nullable": true
          },
          "created": {
            "title": "Date time",
            "type": "string",
            "examples": [
              "2022-10-23T00:00:00.000Z",
              "2022-10-23T00:00:00.000Z"
            ],
            "description": "In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:\n\n```\n2020-10-08T22:40:50Z\n2021-01-01T00:00:00\n```\n\n\n\nWhen syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:\n\n- Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`\n- Unqualified local time: `2021-11-15T01:00:00`\n- UTC time offsets: `2021-11-15T01:00:00-05:00`\n\n> Time zones\n> \n> Not all dates from Codat will contain information about time zones.  \n> Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced."
          },
          "dataConnectionErrors": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Connection/definitions/dataConnectionError"
            }
          },
          "connectionInfo": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "integrationId",
          "integrationKey",
          "sourceId",
          "platformName",
          "linkUrl",
          "status",
          "created",
          "sourceType"
        ],
        "definitions": {
          "dataConnectionStatus": {
            "title": "Data connection status",
            "description": "The current authorization status of the data connection.",
            "type": "string",
            "enum": [
              "PendingAuth",
              "Linked",
              "Unlinked",
              "Deauthorized"
            ]
          },
          "dataConnectionError": {
            "title": "Data connection error",
            "type": "object",
            "properties": {
              "statusCode": {
                "type": "string",
                "description": "The HTTP status code returned by the source platform when the error occurred."
              },
              "statusText": {
                "type": "string",
                "description": "A non-numeric status code/text returned by the source platform when the error occurred."
              },
              "errorMessage": {
                "type": "string",
                "description": "A message about a error returned by Codat."
              },
              "erroredOnUtc": {
                "$ref": "#/components/schemas/Connection/properties/created"
              },
              "status": {
                "title": "Error status",
                "description": "The current status of a transient error. Null statuses indicate that the error is not transient.",
                "type": "string",
                "nullable": true,
                "enum": [
                  "Active",
                  "Resolved"
                ]
              },
              "resolvedOnUtc": {
                "description": "The datetime in Utc that the error was resolved.",
                "nullable": true,
                "$ref": "#/components/schemas/Connection/properties/created"
              }
            }
          },
          "dataConnectionSourceType": {
            "title": "Source Type",
            "description": "The type of platform of the connection.",
            "type": "string",
            "enum": [
              "Accounting",
              "Banking",
              "BankFeed",
              "Commerce",
              "Expense",
              "Other",
              "Unknown"
            ],
            "example": "Accounting"
          }
        },
        "example": {
          "id": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd",
          "integrationId": "bf083d72-62c7-493e-aec9-81b4dbba7e2c",
          "integrationKey": "dfxm",
          "sourceId": "bdd831ce-eebd-4896-89a7-20e5ee8989ee",
          "platformName": "Basiq",
          "linkUrl": "https://link-api.codat.io/companies/86bd88cb-44ab-4dfb-b32f-87b19b14287f/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start",
          "status": "Linked",
          "lastSync": "2022-10-27T10:22:43.6464237Z",
          "created": "2022-10-27T09:53:29Z",
          "sourceType": "Banking"
        }
      },
      "ConnectionStatusChangedWebhook": {
        "title": "Connection status changed webhook",
        "x-internal": true,
        "description": "Webhook request body for a company's data connection status changed.",
        "type": "object",
        "properties": {
          "ClientId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientId"
          },
          "ClientName": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientName"
          },
          "CompanyId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/CompanyId"
          },
          "DataConnectionId": {
            "$ref": "#/components/schemas/Connection/properties/id"
          },
          "RuleId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleId"
          },
          "RuleType": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleType"
          },
          "AlertId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/AlertId"
          },
          "Message": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/Message"
          },
          "Data": {
            "$ref": "#/components/schemas/ConnectionStatusChangedWebhook/definitions/ConnectionStatusChangedWebhookData"
          }
        },
        "definitions": {
          "ConnectionStatusChangedWebhookData": {
            "type": "object",
            "title": "Connection status changed webhook data",
            "properties": {
              "dataConnectionId": {
                "$ref": "#/components/schemas/Connection/properties/id"
              },
              "newStatus": {
                "description": "The new authorization status of the data connection.",
                "$ref": "#/components/schemas/Connection/definitions/dataConnectionStatus"
              },
              "oldStatus": {
                "description": "The old authorization status of the data connection.",
                "$ref": "#/components/schemas/Connection/definitions/dataConnectionStatus"
              },
              "platformKey": {
                "type": "string",
                "minLength": 4,
                "maxLength": 4,
                "pattern": "[a-z]{4}",
                "example": "gbol",
                "description": "A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys."
              }
            }
          }
        },
        "examples": [
          {
            "ClientId": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "ClientName": "Bank of Dave",
            "CompanyId": "8a210b68-6988-11ed-a1eb-0242ac120002",
            "DataConnectionId": "2e9d2c44-f675-40ba-8049-353bfcb5e171",
            "RuleId": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
            "RuleType": "DataConnectionStatusChanged",
            "AlertId": "a9367074-b5c3-42c4-9be4-be129f43577e",
            "Message": "Data connection for SandBox status changed from PendingAuth to Linked",
            "Data": {
              "dataConnectionId": "2e9d2c44-f675-40ba-8049-353bfcb5e171",
              "newStatus": "Linked",
              "oldStatus": "PendingAuth",
              "platformKey": "gbol"
            }
          }
        ]
      },
      "ConnectionWebhook": {
        "title": "Connection webhook",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "description": "Unique identifier of the event."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event.",
            "examples": [
              "connection.created",
              "connection.connected",
              "connection.disconnected",
              "connection.reconnected",
              "connection.deleted"
            ]
          },
          "generatedDate": {
            "$ref": "#/components/schemas/Connection/properties/created",
            "description": "The date time in UTC the event was generated in Codat."
          },
          "payload": {
            "$ref": "#/components/schemas/ConnectionWebhook/definitions/connectionWebhookPayload"
          }
        },
        "definitions": {
          "connectionWebhookPayload": {
            "title": "Connection webhook payload",
            "type": "object",
            "properties": {
              "referenceCompany": {
                "$ref": "#/components/schemas/Company/definitions/companyReference"
              },
              "connection": {
                "$ref": "#/components/schemas/Connection"
              }
            }
          }
        },
        "examples": [
          {
            "id": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "type": "connection.created",
            "generatedDate": "2024-08-08T17:10:34.015Z",
            "payload": {
              "referenceCompany": {
                "id": "0498e921-9b53-4396-a412-4f2f5983b0a2",
                "name": "Bank of Dave",
                "description": "internal_id_mxO7rLfo",
                "links": {
                  "portal": "https://app.codat.io/companies/0498e921-9b53-4396-a412-4f2f5983b0a2/summary"
                },
                "tags": {
                  "customerRegion": "us",
                  "uid": "335a086e-8563-4b03-94e3-39544225ecb6"
                }
              },
              "connection": {
                "id": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd",
                "integrationId": "bf083d72-62c7-493e-aec9-81b4dbba7e2c",
                "integrationKey": "dfxm",
                "sourceId": "bdd831ce-eebd-4896-89a7-20e5ee8989ee",
                "platformName": "Basiq",
                "linkUrl": "https://link-api.codat.io/companies/0498e921-9b53-4396-a412-4f2f5983b0a2/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start",
                "status": "PendingAuth",
                "lastSync": "2022-10-27T10:22:43.646Z",
                "created": "2022-10-27T09:53:29.000Z",
                "sourceType": "Banking"
              }
            }
          },
          {
            "id": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "type": "connection.connected",
            "generatedDate": "2024-08-08T17:10:34.015Z",
            "payload": {
              "referenceCompany": {
                "id": "0498e921-9b53-4396-a412-4f2f5983b0a2",
                "name": "Bank of Dave",
                "description": "internal_id_mxO7rLfo",
                "links": {
                  "portal": "https://app.codat.io/companies/0498e921-9b53-4396-a412-4f2f5983b0a2/summary"
                },
                "tags": {
                  "customerRegion": "us",
                  "uid": "335a086e-8563-4b03-94e3-39544225ecb6"
                }
              },
              "connection": {
                "id": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd",
                "integrationId": "bf083d72-62c7-493e-aec9-81b4dbba7e2c",
                "integrationKey": "dfxm",
                "sourceId": "bdd831ce-eebd-4896-89a7-20e5ee8989ee",
                "platformName": "Basiq",
                "linkUrl": "https://link-api.codat.io/companies/0498e921-9b53-4396-a412-4f2f5983b0a2/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start",
                "status": "Linked",
                "lastSync": "2022-10-27T10:22:43.646Z",
                "created": "2022-10-27T09:53:29.000Z",
                "sourceType": "Banking"
              }
            }
          },
          {
            "id": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "type": "connection.disconnected",
            "generatedDate": "2024-08-08T17:10:34.015Z",
            "payload": {
              "referenceCompany": {
                "id": "0498e921-9b53-4396-a412-4f2f5983b0a2",
                "name": "Bank of Dave",
                "description": "internal_id_mxO7rLfo",
                "links": {
                  "portal": "https://app.codat.io/companies/0498e921-9b53-4396-a412-4f2f5983b0a2/summary"
                },
                "tags": {
                  "customerRegion": "us",
                  "uid": "335a086e-8563-4b03-94e3-39544225ecb6"
                }
              },
              "connection": {
                "id": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd",
                "integrationId": "bf083d72-62c7-493e-aec9-81b4dbba7e2c",
                "integrationKey": "dfxm",
                "sourceId": "bdd831ce-eebd-4896-89a7-20e5ee8989ee",
                "platformName": "Basiq",
                "linkUrl": "https://link-api.codat.io/companies/0498e921-9b53-4396-a412-4f2f5983b0a2/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start",
                "status": "Unlinked",
                "lastSync": "2022-10-27T10:22:43.646Z",
                "created": "2022-10-27T09:53:29.000Z",
                "sourceType": "Banking"
              }
            }
          },
          {
            "id": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "type": "connection.disconnected",
            "generatedDate": "2024-08-08T17:10:34.015Z",
            "payload": {
              "referenceCompany": {
                "id": "0498e921-9b53-4396-a412-4f2f5983b0a2",
                "name": "Bank of Dave",
                "description": "internal_id_mxO7rLfo",
                "links": {
                  "portal": "https://app.codat.io/companies/0498e921-9b53-4396-a412-4f2f5983b0a2/summary"
                },
                "tags": {
                  "customerRegion": "us",
                  "uid": "335a086e-8563-4b03-94e3-39544225ecb6"
                }
              },
              "connection": {
                "id": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd",
                "integrationId": "bf083d72-62c7-493e-aec9-81b4dbba7e2c",
                "integrationKey": "dfxm",
                "sourceId": "bdd831ce-eebd-4896-89a7-20e5ee8989ee",
                "platformName": "Basiq",
                "linkUrl": "https://link-api.codat.io/companies/0498e921-9b53-4396-a412-4f2f5983b0a2/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start",
                "status": "Deauthorized",
                "lastSync": "2022-10-27T10:22:43.646Z",
                "created": "2022-10-27T09:53:29.000Z",
                "sourceType": "Banking",
                "dataConnectionErrors": [
                  {
                    "statusCode": 401,
                    "statusText": "The integration de-authorized access to the connection.",
                    "errorMessage": "The integration de-authorized access to the connection.",
                    "erroredOnUtc": "2022-12-27T09:53:29.000Z",
                    "status": "Active"
                  }
                ]
              }
            }
          },
          {
            "id": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "type": "connection.reconnected",
            "generatedDate": "2024-08-08T17:10:34.015Z",
            "payload": {
              "referenceCompany": {
                "id": "0498e921-9b53-4396-a412-4f2f5983b0a2",
                "name": "Bank of Dave",
                "description": "internal_id_mxO7rLfo",
                "links": {
                  "portal": "https://app.codat.io/companies/0498e921-9b53-4396-a412-4f2f5983b0a2/summary"
                },
                "tags": {
                  "customerRegion": "us",
                  "uid": "335a086e-8563-4b03-94e3-39544225ecb6"
                }
              },
              "connection": {
                "id": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd",
                "integrationId": "bf083d72-62c7-493e-aec9-81b4dbba7e2c",
                "integrationKey": "dfxm",
                "sourceId": "bdd831ce-eebd-4896-89a7-20e5ee8989ee",
                "platformName": "Basiq",
                "linkUrl": "https://link-api.codat.io/companies/0498e921-9b53-4396-a412-4f2f5983b0a2/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start",
                "status": "Linked",
                "lastSync": "2022-10-27T10:22:43.646Z",
                "created": "2022-10-27T09:53:29.000Z",
                "sourceType": "Banking"
              }
            }
          },
          {
            "id": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "type": "connection.deleted",
            "generatedDate": "2024-08-08T17:10:34.015Z",
            "payload": {
              "referenceCompany": {
                "id": "0498e921-9b53-4396-a412-4f2f5983b0a2",
                "name": "Bank of Dave",
                "description": "internal_id_mxO7rLfo",
                "links": {
                  "portal": "https://app.codat.io/companies/0498e921-9b53-4396-a412-4f2f5983b0a2/summary"
                },
                "tags": {
                  "customerRegion": "us",
                  "uid": "335a086e-8563-4b03-94e3-39544225ecb6"
                }
              },
              "connection": {
                "id": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd",
                "integrationId": "bf083d72-62c7-493e-aec9-81b4dbba7e2c",
                "integrationKey": "dfxm",
                "sourceId": "bdd831ce-eebd-4896-89a7-20e5ee8989ee",
                "platformName": "Basiq",
                "linkUrl": "https://link-api.codat.io/companies/0498e921-9b53-4396-a412-4f2f5983b0a2/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start",
                "status": "Linked",
                "lastSync": "2022-10-27T10:22:43.646Z",
                "created": "2022-10-27T09:53:29.000Z",
                "sourceType": "Banking"
              }
            }
          }
        ]
      },
      "DatasetDataChangedWebhook": {
        "title": "Dataset data changed webhook",
        "x-internal": true,
        "description": "Webhook request body to notify that a data synchronization has completed.",
        "type": "object",
        "properties": {
          "ClientId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientId"
          },
          "ClientName": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientName"
          },
          "CompanyId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/CompanyId"
          },
          "DataConnectionId": {
            "$ref": "#/components/schemas/Connection/properties/id"
          },
          "RuleId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleId"
          },
          "RuleType": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleType"
          },
          "AlertId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/AlertId"
          },
          "Message": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/Message"
          },
          "Data": {
            "title": "Dataset data changed webhook data",
            "type": "object",
            "properties": {
              "dataType": {
                "$ref": "#/components/schemas/PushOperationStatusChangedWebhook/definitions/PushOperationStatusChangedWebhookData/properties/dataType"
              },
              "datasetId": {
                "$ref": "#/components/schemas/DatasetStatusChangedErrorWebhook/definitions/DatasetStatusChangedErrorWebhookData/properties/datasetId"
              }
            }
          }
        },
        "examples": [
          {
            "ClientId": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "ClientName": "Bank of Dave",
            "CompanyId": "8a210b68-6988-11ed-a1eb-0242ac120002",
            "DataConnectionId": "2e9d2c44-f675-40ba-8049-353bfcb5e171",
            "RuleId": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
            "RuleType": "Dataset data changed",
            "AlertId": "a9367074-b5c3-42c4-9be4-be129f43577e",
            "Message": "Data has changed for dataset type invoices, company 8a210b68-6988-11ed-a1eb-0242ac120002",
            "Data": {
              "dataType": "invoices",
              "datasetId": "6586f21b-ad4d-4d06-a309-712af47184a2"
            }
          }
        ]
      },
      "DatasetStatusChangedErrorWebhook": {
        "title": "Dataset status changed to error webhook",
        "x-internal": true,
        "description": "Webhook request body to notify that a data synchronization has completed.",
        "type": "object",
        "properties": {
          "ClientId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientId"
          },
          "ClientName": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientName"
          },
          "CompanyId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/CompanyId"
          },
          "DataConnectionId": {
            "$ref": "#/components/schemas/Connection/properties/id"
          },
          "RuleId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleId"
          },
          "RuleType": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleType"
          },
          "AlertId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/AlertId"
          },
          "Message": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/Message"
          },
          "Data": {
            "$ref": "#/components/schemas/DatasetStatusChangedErrorWebhook/definitions/DatasetStatusChangedErrorWebhookData"
          }
        },
        "definitions": {
          "DatasetStatusChangedErrorWebhookData": {
            "type": "object",
            "title": "Dataset status changed to error webhook data",
            "properties": {
              "dataType": {
                "$ref": "#/components/schemas/PushOperationStatusChangedWebhook/definitions/PushOperationStatusChangedWebhookData/properties/dataType"
              },
              "datasetStatus": {
                "type": "string",
                "description": "The current status of the dataset's sync."
              },
              "datasetId": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the dataset that completed its sync."
              }
            }
          }
        },
        "examples": [
          {
            "ClientId": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "ClientName": "Bank of Dave",
            "CompanyId": "8a210b68-6988-11ed-a1eb-0242ac120002",
            "DataConnectionId": "2e9d2c44-f675-40ba-8049-353bfcb5e171",
            "RuleId": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
            "RuleType": "Data Sync Status Changed To Error",
            "AlertId": "a9367074-b5c3-42c4-9be4-be129f43577e",
            "Message": "ERROR: syncing payments triggered a ProcessingError notification at 2020-04-21T12:12:57.4250446Z.",
            "Data": {
              "dataType": "invoices",
              "datasetStatus": "ProcessingError",
              "datasetId": "6586f21b-ad4d-4d06-a309-712af47184a2"
            }
          }
        ]
      },
      "DataSyncCompletedWebhook": {
        "title": "Data sync completed webhook",
        "x-internal": true,
        "description": "Webhook request body to notify the completion of a data sync.",
        "type": "object",
        "properties": {
          "ClientId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientId"
          },
          "ClientName": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientName"
          },
          "CompanyId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/CompanyId"
          },
          "DataConnectionId": {
            "$ref": "#/components/schemas/Connection/properties/id"
          },
          "RuleId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleId"
          },
          "RuleType": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleType"
          },
          "AlertId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/AlertId"
          },
          "Message": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/Message"
          },
          "Data": {
            "$ref": "#/components/schemas/DataSyncCompletedWebhook/definitions/DataSyncCompletedWebhookData"
          }
        },
        "definitions": {
          "DataSyncCompletedWebhookData": {
            "type": "object",
            "title": "Data sync completed webhook data",
            "properties": {
              "dataType": {
                "$ref": "#/components/schemas/PushOperationStatusChangedWebhook/definitions/PushOperationStatusChangedWebhookData/properties/dataType",
                "nullable": true
              },
              "datasetId": {
                "$ref": "#/components/schemas/DatasetStatusChangedErrorWebhook/definitions/DatasetStatusChangedErrorWebhookData/properties/datasetId"
              }
            }
          }
        },
        "examples": [
          {
            "ClientId": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "ClientName": "Bank of Dave",
            "CompanyId": "8a210b68-6988-11ed-a1eb-0242ac120002",
            "DataConnectionId": "2e9d2c44-f675-40ba-8049-353bfcb5e171",
            "RuleId": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
            "RuleType": "Data sync completed",
            "AlertId": "a9367074-b5c3-42c4-9be4-be129f43577e",
            "Message": "Data sync of type creditNotes completed for company 7626befb-0c7d-49a4-9366-bc4c81b4e4b7",
            "Data": {
              "dataType": "creditNotes",
              "datasetId": "1541a5ee-0d84-4b6e-a7f7-c07c1f216333"
            }
          }
        ]
      },
      "DataTypeWriteWebhook": {
        "title": "Write data type webhook",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "description": "Unique identifier of the event."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event.",
            "examples": [
              "bills.write.successful",
              "bills.write.unsuccessful"
            ]
          },
          "generatedDate": {
            "$ref": "#/components/schemas/Connection/properties/created",
            "description": "The date time in UTC the event was generated in Codat."
          },
          "payload": {
            "$ref": "#/components/schemas/DataTypeWriteWebhook/definitions/dataTypeWriteWebhookPayload"
          }
        },
        "definitions": {
          "dataTypeWriteWebhookPayload": {
            "title": "Payload",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the write request. This is also known as the push operation ID."
              },
              "type": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook/definitions/writeType"
              },
              "referenceCompany": {
                "$ref": "#/components/schemas/Company/definitions/companyReference"
              },
              "connectionId": {
                "$ref": "#/components/schemas/Connection/properties/id"
              },
              "requestedOnDate": {
                "$ref": "#/components/schemas/Connection/properties/created",
                "description": "The date time in UTC the write request was submitted."
              },
              "completedOnDate": {
                "$ref": "#/components/schemas/Connection/properties/created",
                "description": "The date time in UTC the write request completed."
              },
              "status": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook/definitions/writeStatus"
              },
              "record": {
                "$ref": "#/components/schemas/DataTypeWriteWebhook/definitions/dataTypeWriteWebhookRecord",
                "nullable": true
              },
              "attachmentId": {
                "type": "string",
                "nullable": true,
                "description": "Unique identifier for the uploaded attachment, null if no attachment uploaded."
              }
            }
          },
          "dataTypeWriteWebhookRecord": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identifier of the data type created, updated, deleted, or had an attachment uploaded in the accounting platform."
              }
            }
          },
          "writeType": {
            "title": "Write type",
            "description": "Type of write request.",
            "type": "string",
            "enum": [
              "Create",
              "Update",
              "Delete",
              "UploadAttachment"
            ]
          },
          "writeStatus": {
            "title": "Write request status",
            "type": "string",
            "enum": [
              "Pending",
              "Failed",
              "Success",
              "TimedOut"
            ],
            "description": "The current status of the write request, which is the same as the push operation status."
          }
        },
        "examples": [
          {
            "id": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "eventType": "bills.write.successful",
            "generatedDate": "2023-05-03T10:00:23.000Z",
            "payload": {
              "id": "a9367074-b5c3-42c4-9be4-be129f43577e",
              "type": "Create",
              "referenceCompany": {
                "id": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
                "name": "Toft stores",
                "description": "cust_1MtJUT2eZvKYlo2CNaw2HvEv"
              },
              "connectionId": "12571faf-0898-47e7-afdd-0fe9eb0a9bf5",
              "requestedOnDate": "2023-05-03T10:00:00.000Z",
              "completedOnDate": "2023-05-03T10:00:23.000Z",
              "status": "Success",
              "record": {
                "id": "bil_1Nispe2eZvKYlo2Cd31jOCgZ"
              }
            }
          },
          {
            "id": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "eventType": "bills.write.successful",
            "generatedDate": "2023-05-03T10:00:23.000Z",
            "payload": {
              "id": "a9367074-b5c3-42c4-9be4-be129f43577e",
              "type": "UploadAttachment",
              "referenceCompany": {
                "id": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
                "name": "Toft stores",
                "description": "cust_1MtJUT2eZvKYlo2CNaw2HvEv"
              },
              "connectionId": "12571faf-0898-47e7-afdd-0fe9eb0a9bf5",
              "requestedOnDate": "2023-05-03T10:00:00.000Z",
              "completedOnDate": "2023-05-03T10:00:23.000Z",
              "status": "Success",
              "record": {
                "id": "bil_1Nispe2eZvKYlo2Cd31jOCgZ"
              },
              "attachmentId": "att_1AZtxr2eZvKYlo2CJDX8whov"
            }
          },
          {
            "id": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "eventType": "bills.write.unsuccessful",
            "generatedDate": "2023-05-03T10:00:23.000Z",
            "payload": {
              "id": "a9367074-b5c3-42c4-9be4-be129f43577e",
              "type": "Update",
              "referenceCompany": {
                "id": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
                "name": "Toft stores",
                "description": "cust_1MtJUT2eZvKYlo2CNaw2HvEv"
              },
              "connectionId": "12571faf-0898-47e7-afdd-0fe9eb0a9bf5",
              "requestedOnDate": "2023-05-03T10:00:00.000Z",
              "completedOnDate": "2023-05-03T10:00:23.000Z",
              "status": "Failed"
            }
          },
          {
            "id": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "eventType": "bills.write.unsuccessful",
            "generatedDate": "2023-05-03T10:00:23.000Z",
            "payload": {
              "id": "a9367074-b5c3-42c4-9be4-be129f43577e",
              "type": "Delete",
              "referenceCompany": {
                "id": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
                "name": "Toft stores",
                "description": "cust_1MtJUT2eZvKYlo2CNaw2HvEv"
              },
              "connectionId": "12571faf-0898-47e7-afdd-0fe9eb0a9bf5",
              "requestedOnDate": "2023-05-03T10:00:00.000Z",
              "completedOnDate": "2023-05-03T10:00:23.000Z",
              "status": "TimedOut"
            }
          },
          {
            "id": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "eventType": "bills.write.unsuccessful",
            "generatedDate": "2023-05-03T10:00:23.000Z",
            "payload": {
              "id": "a9367074-b5c3-42c4-9be4-be129f43577e",
              "type": "UploadAttachment",
              "referenceCompany": {
                "id": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
                "name": "Toft stores",
                "description": "cust_1MtJUT2eZvKYlo2CNaw2HvEv"
              },
              "connectionId": "12571faf-0898-47e7-afdd-0fe9eb0a9bf5",
              "requestedOnDate": "2023-05-03T10:00:00.000Z",
              "completedOnDate": "2023-05-03T10:00:23.000Z",
              "status": "TimedOut",
              "record": {
                "id": "bil_1Nispe2eZvKYlo2Cd31jOCgZ"
              }
            }
          }
        ]
      },
      "ExpensesSyncWebhook": {
        "title": "Expenses sync webhook",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "description": "Unique identifier of the event."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event.",
            "examples": [
              "expenses.sync.successful",
              "expenses.sync.unsuccessful"
            ]
          },
          "generatedDate": {
            "$ref": "#/components/schemas/Connection/properties/created",
            "description": "The date time in UTC the event was generated in Codat."
          },
          "payload": {
            "$ref": "#/components/schemas/ExpensesSyncWebhook/definitions/expensesSyncWebhookPayload"
          }
        },
        "definitions": {
          "expensesSyncWebhookPayload": {
            "title": "Expenses sync webhook payload",
            "type": "object",
            "properties": {
              "referenceCompany": {
                "$ref": "#/components/schemas/Company/definitions/companyReference"
              },
              "syncId": {
                "type": "string",
                "description": "Unique identifier of the sync."
              }
            }
          }
        },
        "examples": [
          {
            "id": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "eventType": "expenses.sync.successful",
            "generatedDate": "2024-09-01T00:00:00Z",
            "payload": {
              "referenceCompany": {
                "id": "0498e921-9b53-4396-a412-4f2f5983b0a2",
                "name": "Bank of Dave",
                "description": "internal_id_mxO7rLfo"
              },
              "syncId": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd"
            }
          },
          {
            "id": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "eventType": "expenses.sync.unsuccessful",
            "generatedDate": "2024-09-01T00:00:00Z",
            "payload": {
              "referenceCompany": {
                "id": "0498e921-9b53-4396-a412-4f2f5983b0a2",
                "name": "Bank of Dave",
                "description": "internal_id_mxO7rLfo"
              },
              "syncId": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd"
            }
          }
        ]
      },
      "NewCompanySynchronizedWebhook": {
        "title": "New company synchronized webhook",
        "x-internal": true,
        "description": "Webhook request body to notify that a new company has successfully synchronized at least one dataType for the first time.",
        "type": "object",
        "properties": {
          "ClientId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientId"
          },
          "ClientName": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientName"
          },
          "CompanyId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/CompanyId"
          },
          "DataConnectionId": {
            "$ref": "#/components/schemas/Connection/properties/id"
          },
          "RuleId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleId"
          },
          "RuleType": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleType"
          },
          "AlertId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/AlertId"
          },
          "Message": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/Message"
          }
        },
        "examples": [
          {
            "ClientId": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "ClientName": "Bank of Dave",
            "CompanyId": "8a210b68-6988-11ed-a1eb-0242ac120002",
            "DataConnectionId": "2e9d2c44-f675-40ba-8049-353bfcb5e171",
            "RuleId": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
            "RuleType": "New company synchronised",
            "AlertId": "a9367074-b5c3-42c4-9be4-be129f43577e",
            "Message": "Company 8a210b68-6988-11ed-a1eb-0242ac120002 synced for the first time"
          }
        ]
      },
      "PushOperationStatusChangedWebhook": {
        "title": "Push operation status changed webhook",
        "x-internal": true,
        "description": "Webhook request body for a push operation status change.",
        "type": "object",
        "properties": {
          "ClientId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientId"
          },
          "ClientName": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientName"
          },
          "CompanyId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/CompanyId"
          },
          "DataConnectionId": {
            "$ref": "#/components/schemas/Connection/properties/id"
          },
          "RuleId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleId"
          },
          "RuleType": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleType"
          },
          "AlertId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/AlertId"
          },
          "Message": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/Message"
          },
          "Data": {
            "$ref": "#/components/schemas/PushOperationStatusChangedWebhook/definitions/PushOperationStatusChangedWebhookData"
          }
        },
        "definitions": {
          "PushOperationStatusChangedWebhookData": {
            "type": "object",
            "title": "Push operation status changed webhook data",
            "properties": {
              "dataType": {
                "title": "Data types",
                "x-internal": true,
                "type": "string",
                "description": "Available data types",
                "enum": [
                  "accountTransactions",
                  "balanceSheet",
                  "bankAccounts",
                  "bankTransactions",
                  "billCreditNotes",
                  "billPayments",
                  "bills",
                  "cashFlowStatement",
                  "chartOfAccounts",
                  "company",
                  "creditNotes",
                  "customers",
                  "directCosts",
                  "directIncomes",
                  "invoices",
                  "itemReceipts",
                  "items",
                  "journalEntries",
                  "journals",
                  "paymentMethods",
                  "payments",
                  "profitAndLoss",
                  "purchaseOrders",
                  "salesOrders",
                  "suppliers",
                  "taxRates",
                  "trackingCategories",
                  "transfers",
                  "banking-accountBalances",
                  "banking-accounts",
                  "banking-transactionCategories",
                  "banking-transactions",
                  "commerce-companyInfo",
                  "commerce-customers",
                  "commerce-disputes",
                  "commerce-locations",
                  "commerce-orders",
                  "commerce-paymentMethods",
                  "commerce-payments",
                  "commerce-productCategories",
                  "commerce-products",
                  "commerce-taxComponents",
                  "commerce-transactions"
                ],
                "example": "invoices"
              },
              "status": {
                "title": "Push operation status",
                "type": "string",
                "enum": [
                  "Pending",
                  "Failed",
                  "Success",
                  "TimedOut"
                ],
                "description": "The current status of the push operation."
              },
              "pushOperationKey": {
                "type": "string",
                "format": "uuid",
                "description": "A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted."
              }
            }
          }
        },
        "examples": [
          {
            "ClientId": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "ClientName": "Bank of Dave",
            "CompanyId": "8a210b68-6988-11ed-a1eb-0242ac120002",
            "DataConnectionId": "2e9d2c44-f675-40ba-8049-353bfcb5e171",
            "RuleId": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
            "RuleType": "Push Operation Status Changed()",
            "AlertId": "a9367074-b5c3-42c4-9be4-be129f43577e",
            "Message": "invoices triggered notification for PushOperationStatusChanged at 2019-05-22T18:19:42.742Z",
            "Data": {
              "dataType": "invoices",
              "status": "Success",
              "pushOperationKey": "c2f8847d-3047-4619-a157-6d947d8e4a73"
            }
          }
        ]
      },
      "PushOperationTimedOutWebhook": {
        "title": "Push operation timed out webhook",
        "x-internal": true,
        "description": "Webhook request body notifying that a push push operation has timed out.",
        "type": "object",
        "properties": {
          "ClientId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientId"
          },
          "ClientName": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientName"
          },
          "CompanyId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/CompanyId"
          },
          "DataConnectionId": {
            "$ref": "#/components/schemas/Connection/properties/id"
          },
          "RuleId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleId"
          },
          "RuleType": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleType"
          },
          "AlertId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/AlertId"
          },
          "Message": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/Message"
          },
          "Data": {
            "$ref": "#/components/schemas/PushOperationTimedOutWebhook/definitions/PushOperationTimedOutWebhookData"
          }
        },
        "definitions": {
          "PushOperationTimedOutWebhookData": {
            "type": "object",
            "title": "Push operation timed out webhook data",
            "properties": {
              "dataType": {
                "$ref": "#/components/schemas/PushOperationStatusChangedWebhook/definitions/PushOperationStatusChangedWebhookData/properties/dataType"
              },
              "pushOperationKey": {
                "$ref": "#/components/schemas/PushOperationStatusChangedWebhook/definitions/PushOperationStatusChangedWebhookData/properties/pushOperationKey"
              },
              "pushOperationGuid": {
                "$ref": "#/components/schemas/PushOperationStatusChangedWebhook/definitions/PushOperationStatusChangedWebhookData/properties/pushOperationKey",
                "deprecated": true,
                "x-speakeasy-deprecation-replacement": "pushOperationKey"
              }
            }
          }
        },
        "examples": [
          {
            "ClientId": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "ClientName": "Bank of Dave",
            "CompanyId": "8a210b68-6988-11ed-a1eb-0242ac120002",
            "DataConnectionId": "2e9d2c44-f675-40ba-8049-353bfcb5e171",
            "RuleId": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
            "RuleType": "Push Operation Timed Out",
            "AlertId": "a9367074-b5c3-42c4-9be4-be129f43577e",
            "Message": "ERROR: pushing invoices never finished in time, timing out at 2020-09-07T08:42:13",
            "Data": {
              "dataType": "invoices",
              "pushOperationKey": "c2f8847d-3047-4619-a157-6d947d8e4a73",
              "pushOperationGuid": "c2f8847d-3047-4619-a157-6d947d8e4a73"
            }
          }
        ]
      },
      "ReadCompletedWebhook": {
        "title": "Read completed webhook",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "743ec94a-8aa4-44bb-8bd4-e1855ee0e74b",
            "description": "Unique identifier of the event."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event."
          },
          "generatedDate": {
            "$ref": "#/components/schemas/Connection/properties/created",
            "description": "The date time in UTC the event was generated in Codat."
          },
          "payload": {
            "$ref": "#/components/schemas/ReadCompletedWebhook/definitions/readCompletedWebhookPayload"
          }
        },
        "definitions": {
          "readCompletedWebhookPayload": {
            "title": "Company fetch completed webhook payload",
            "type": "object",
            "properties": {
              "referenceCompany": {
                "$ref": "#/components/schemas/Company/definitions/companyReference"
              },
              "product": {
                "type": "string",
                "example": "lending",
                "description": "Name of the product that requested the data types to be fetched.",
                "nullable": true
              },
              "modifiedFromDate": {
                "$ref": "#/components/schemas/Connection/properties/created",
                "description": "The date time in UTC when the data types were last fetched and input into Codat's cache.",
                "nullable": true
              },
              "dataTypes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "connectionId": {
                      "$ref": "#/components/schemas/Connection/properties/id"
                    },
                    "dataType": {
                      "$ref": "#/components/schemas/PushOperationStatusChangedWebhook/definitions/PushOperationStatusChangedWebhookData/properties/dataType"
                    },
                    "recordsModified": {
                      "type": "boolean",
                      "example": false,
                      "description": "`True` if records have been created, updated or deleted in Codat's cache."
                    },
                    "status": {
                      "title": "Dataset status",
                      "type": "string",
                      "description": "The current status of the dataset.",
                      "enum": [
                        "Initial",
                        "Queued",
                        "Fetching",
                        "MapQueued",
                        "Mapping",
                        "Complete",
                        "FetchError",
                        "MapError",
                        "InternalError",
                        "ProcessingQueued",
                        "Processing",
                        "ProcessingError",
                        "ValidationQueued",
                        "Validating",
                        "ValidationError",
                        "AuthError",
                        "Cancelled",
                        "NotSupported",
                        "RateLimitError",
                        "PermissionsError",
                        "PrerequisiteNotMet"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ReportGenerationWebhook": {
        "title": "Report generation webhook",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "description": "Unique identifier of the event."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event.",
            "examples": [
              "reports.categorizedBankStatement.generate.successful"
            ]
          },
          "generatedDate": {
            "$ref": "#/components/schemas/Connection/properties/created",
            "description": "The date time in UTC the event was generated in Codat."
          },
          "payload": {
            "$ref": "#/components/schemas/ReportGenerationWebhook/definitions/ReportGenerationPayload"
          }
        },
        "definitions": {
          "ReportGenerationPayload": {
            "title": "Report generation payload",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "a78e2625-7190-4d94-ae3b-071320451026",
                "description": "Unique identifier of the report."
              },
              "referenceCompany": {
                "$ref": "#/components/schemas/Company/definitions/companyReference"
              }
            }
          }
        },
        "examples": [
          {
            "id": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "eventType": "reports.categorizedBankStatement.generate.successful",
            "generatedDate": "2023-05-03T10:00:23.000Z",
            "payload": {
              "id": "bb42ce7e-720a-4ac5-b640-f24f53ff47c8",
              "referenceCompany": {
                "id": "0498e921-9b53-4396-a412-4f2f5983b0a2",
                "name": "Bank of Dave",
                "description": "internal_id_mxO7rLfo",
                "links": {
                  "portal": "https://app.codat.io/companies/0498e921-9b53-4396-a412-4f2f5983b0a2/summary"
                },
                "tags": {
                  "customerRegion": "us",
                  "uid": "335a086e-8563-4b03-94e3-39544225ecb6"
                }
              }
            }
          }
        ]
      },
      "SourceAccountWebhook": {
        "title": "Source account status changed webhook",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "ba29118f-5406-4e59-b05c-ba307ca38d01",
            "description": "Unique identifier of the event."
          },
          "eventType": {
            "type": "string",
            "description": "The type of event.",
            "examples": [
              "bankFeeds.sourceAccount.connected",
              "bankFeeds.sourceAccount.disconnected"
            ]
          },
          "generatedDate": {
            "$ref": "#/components/schemas/Connection/properties/created",
            "description": "The date time in UTC the event was generated in Codat."
          },
          "payload": {
            "$ref": "#/components/schemas/SourceAccountWebhook/definitions/sourceAccountWebhookPayload"
          }
        },
        "definitions": {
          "sourceAccountWebhookPayload": {
            "title": "Payload",
            "type": "object",
            "properties": {
              "referenceCompany": {
                "$ref": "#/components/schemas/Company/definitions/companyReference"
              },
              "companyId": {
                "$ref": "#/components/schemas/SyncFailedWebhook/properties/CompanyId",
                "deprecated": true
              },
              "connectionId": {
                "$ref": "#/components/schemas/Connection/properties/id"
              },
              "sourceAccount": {
                "title": "Source account (v1)",
                "type": "object",
                "description": "The target bank account in a supported accounting software for ingestion into a bank feed.",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique ID for the bank account."
                  },
                  "accountName": {
                    "type": "string",
                    "nullable": true,
                    "description": "The bank account name."
                  },
                  "accountType": {
                    "type": "string",
                    "nullable": true,
                    "description": "The type of bank account e.g. Credit."
                  },
                  "accountNumber": {
                    "type": "string",
                    "nullable": true,
                    "description": "The account number."
                  },
                  "sortCode": {
                    "type": "string",
                    "nullable": true,
                    "description": "The sort code."
                  },
                  "currency": {
                    "title": "Currency",
                    "x-internal": true,
                    "type": "string",
                    "description": "The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.\n\n## Unknown currencies\n\nIn line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. \n\nThere are only a very small number of edge cases where this currency code is returned by the Codat system.",
                    "format": "ISO4217",
                    "examples": [
                      "GBP",
                      "USD",
                      "EUR"
                    ]
                  },
                  "balance": {
                    "type": "number",
                    "format": "decimal",
                    "nullable": true,
                    "description": "The latest balance for the bank account."
                  },
                  "modifiedDate": {
                    "$ref": "#/components/schemas/Connection/properties/created",
                    "nullable": true,
                    "description": "The last date the bank account was modified."
                  },
                  "status": {
                    "type": "string",
                    "nullable": true,
                    "description": "Status of the source account.",
                    "enum": [
                      "pending",
                      "connected",
                      "connecting",
                      "disconnected",
                      "unknown"
                    ]
                  },
                  "feedStartDate": {
                    "$ref": "#/components/schemas/Connection/properties/created",
                    "nullable": true
                  }
                },
                "required": [
                  "id"
                ],
                "definitions": {
                  "sourceAccounts": {
                    "title": "Source accounts",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SourceAccountWebhook/definitions/sourceAccountWebhookPayload/properties/sourceAccount"
                    }
                  }
                },
                "examples": [
                  {
                    "id": "acc-002",
                    "accountName": "account-081",
                    "sortCode": "123456",
                    "accountType": "Credit",
                    "accountNumber": "12345670",
                    "currency": "GBP",
                    "balance": 99.99,
                    "modifiedDate": "2023-01-09T14:14:14.1057478Z",
                    "status": "pending"
                  },
                  {
                    "id": "acc-003",
                    "accountName": "account-095",
                    "sortCode": "123456",
                    "accountType": "Credit",
                    "accountNumber": "12345671",
                    "currency": "USD",
                    "balance": 0,
                    "modifiedDate": "2023-01-09T14:14:14.1057478Z",
                    "status": "pending"
                  }
                ]
              }
            }
          }
        }
      },
      "SyncCompleteWebhook": {
        "title": "Sync complete webhook",
        "x-internal": true,
        "description": "Webhook request body used to notify that a sync has completed.",
        "type": "object",
        "properties": {
          "ClientId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientId"
          },
          "ClientName": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientName"
          },
          "CompanyId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/CompanyId"
          },
          "RuleId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleId"
          },
          "RuleType": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleType"
          },
          "AlertId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/AlertId"
          },
          "Message": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/Message"
          },
          "Data": {
            "$ref": "#/components/schemas/SyncCompleteWebhook/definitions/SyncCompleteWebhookData"
          }
        },
        "definitions": {
          "SyncCompleteWebhookData": {
            "type": "object",
            "title": "Sync complete webhook data",
            "properties": {
              "syncId": {
                "$ref": "#/components/schemas/SyncFailedWebhook/definitions/SyncFailedWebhookData/properties/syncId"
              },
              "syncType": {
                "$ref": "#/components/schemas/SyncFailedWebhook/definitions/SyncFailedWebhookData/properties/syncType"
              }
            }
          }
        },
        "examples": [
          {
            "ClientId": "30e0f9d2-52c0-4c9f-a806-bcd98a3bcd7e",
            "ClientName": "Expense Sync",
            "CompanyId": "1f9559e7-8368-48c9-bdf4-f158e16b8b85",
            "AlertId": "33a4f8e9-09ae-4334-9b00-7bbe83024672",
            "RuleId": "5c27631d-3b63-4b50-8228-ee502fd113eb",
            "RuleType": "Sync Completed",
            "Message": "Sync 321363b4-efa9-4fbc-b71c-0b58d62f3248 for company 1f9559e7-8368-48c9-bdf4-f158e16b8b85 of type Expense completed successfully.",
            "Data": {
              "syncId": "321363b4-efa9-4fbc-b71c-0b58d62f3248",
              "syncType": "Expense"
            }
          }
        ]
      },
      "SyncConnectionDeletedWebhook": {
        "title": "Sync connection deleted webhook",
        "description": "A Sync for Commerce connection is deleted.",
        "x-internal": true,
        "type": "object",
        "properties": {
          "ClientId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientId"
          },
          "ClientName": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/ClientName"
          },
          "CompanyId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/CompanyId"
          },
          "RuleId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleId"
          },
          "RuleType": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/RuleType"
          },
          "AlertId": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/AlertId"
          },
          "Message": {
            "$ref": "#/components/schemas/SyncFailedWebhook/properties/Message"
          }
        },
        "examples": [
          {
            "ClientId": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "ClientName": "Bank of Dave",
            "CompanyId": "8a210b68-6988-11ed-a1eb-0242ac120002",
            "RuleId": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
            "RuleType": "Sync Connection Deleted",
            "AlertId": "a9367074-b5c3-42c4-9be4-be129f43577e",
            "Message": "Sync connection for company 8a210b68-6988-11ed-a1eb-0242ac120002 deleted"
          },
          {
            "ClientId": "bae71d36-ff47-420a-b4a6-f8c9ddf41140",
            "ClientName": "Bank of Dave",
            "CompanyId": "8a210b68-6988-11ed-a1eb-0242ac120002",
            "RuleId": "70af3071-65d9-4ec3-b3cb-5283e8d55dac",
            "RuleType": "Sync Connection Deleted",
            "AlertId": "a9367074-b5c3-42c4-9be4-be129f43577e",
            "Message": "Sync connection for company Tesco (8a210b68-6988-11ed-a1eb-0242ac120002) deleted"
          }
        ]
      },
      "SyncFailedWebhook": {
        "title": "Sync failed webhook",
        "x-internal": true,
        "description": "Webhook request body used to notify that a sync has failed.",
        "type": "object",
        "properties": {
          "ClientId": {
            "title": "Client ID",
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for your client in Codat."
          },
          "ClientName": {
            "type": "string",
            "description": "Name of your client in Codat."
          },
          "CompanyId": {
            "type": "string",
            "format": "uuid",
            "example": "8a210b68-6988-11ed-a1eb-0242ac120002",
            "description": "Unique identifier for your SMB in Codat."
          },
          "RuleId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the rule.",
            "deprecated": true
          },
          "RuleType": {
            "type": "string",
            "x-stoplight": {
              "id": "34d52a089f08a"
            },
            "description": "The type of rule."
          },
          "AlertId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the webhook event."
          },
          "Message": {
            "type": "string",
            "description": "A human-readable message about the webhook."
          },
          "Data": {
            "$ref": "#/components/schemas/SyncFailedWebhook/definitions/SyncFailedWebhookData"
          }
        },
        "definitions": {
          "SyncFailedWebhookData": {
            "type": "object",
            "title": "Sync failed webhook data",
            "properties": {
              "syncId": {
                "type": "string",
                "format": "uuid",
                "example": "a9367074-b5c3-42c4-9be4-be129f43577e",
                "description": "Unique identifier for the failed sync."
              },
              "syncType": {
                "type": "string",
                "description": "The type of sync being performed."
              },
              "FailureStage": {
                "type": "string",
                "description": "The stage of the job the sync failed."
              }
            }
          }
        },
        "examples": [
          {
            "ClientId": "30e0f9d2-52c0-4c9f-a806-bcd98a3bcd7e",
            "ClientName": "Expense Sync",
            "CompanyId": "1f9559e7-8368-48c9-bdf4-f158e16b8b85",
            "RuleId": "289c80dc-2aee-4b71-afff-9acd8d051080",
            "RuleType": "Sync Failed",
            "AlertId": "72c1103b-7f17-4a3a-8db5-67c2d360a516",
            "Message": "Sync 3bead2a1-1b3d-4d90-8077-cddc5ca68b01 for company 1f9559e7-8368-48c9-bdf4-f158e16b8b85 of type Expense has failed at step Pushing.",
            "Data": {
              "syncId": "3bead2a1-1b3d-4d90-8077-cddc5ca68b01",
              "syncType": "Expense",
              "FailureStage": "Pushing"
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "auth_header": {
        "name": "Authorization",
        "description": "The word \"Basic\" followed by a space and your API key. [API keys](https://docs.codat.io/accounting-api#/schemas/apiKeys) are tokens used to control access to the API. You can get an API key via [the Codat Portal](https://app.codat.io/developers/api-keys), via [the API](https://docs.codat.io/codat-api#/api-keys/api-keys-list), or [read more](https://docs.codat.io/using-the-api/authentication) about authentication at Codat.",
        "type": "apiKey",
        "in": "header",
        "x-speakeasy-example": "Basic BASE_64_ENCODED(API_KEY)"
      }
    }
  }
}
