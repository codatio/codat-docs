{
  "openapi": "3.1.0",
  "servers": [
    {
      "description": "Production",
      "url": "https://api.codat.io"
    }
  ],
  "info": {
    "title": "Bank Feeds API",
    "version": "3.0.0",
    "contact": {
      "email": "support@codat.io",
      "name": "Codat"
    },
    "description": "Bank Feeds API enables your SMB users to set up bank feeds from accounts in your application to supported accounting platforms.\n\nA bank feed is a connection between a source bank account in your application and a target bank account in a supported accounting package.\n\n[Read more...](https://docs.codat.io/bank-feeds-api/overview)\n\n[See our OpenAPI spec](https://github.com/codatio/oas)",
    "termsOfService": "https://www.codat.io/legals/"
  },
  "security": [
    {
      "auth_header": []
    }
  ],
  "x-speakeasy-retries": {
    "strategy": "backoff",
    "backoff": {
      "initialInterval": 500,
      "maxInterval": 60000,
      "maxElapsedTime": 3600000,
      "exponent": 1.5
    },
    "statusCodes": [
      408,
      429,
      "5XX"
    ],
    "retryConnectionErrors": true
  },
  "x-speakeasy-name-override": [
    {
      "operationId": "^list-.*?",
      "methodNameOverride": "list"
    },
    {
      "operationId": "^list-.*?-attachments",
      "methodNameOverride": "list-attachments"
    },
    {
      "operationId": "^get-.*?",
      "methodNameOverride": "get"
    },
    {
      "operationId": "^get-create-.*?-model",
      "methodNameOverride": "get-create-model"
    },
    {
      "operationId": "^get-create-update.*?-model",
      "methodNameOverride": "get-create-update-model"
    },
    {
      "operationId": "^get-.*?-attachment",
      "methodNameOverride": "get-attachment"
    },
    {
      "operationId": "^update-.*?",
      "methodNameOverride": "update"
    },
    {
      "operationId": "^create-.*?",
      "methodNameOverride": "create"
    },
    {
      "operationId": "^delete-.*?",
      "methodNameOverride": "delete"
    },
    {
      "operationId": "^download-.*?-attachment",
      "methodNameOverride": "download-attachment"
    },
    {
      "operationId": "^upload-.*?-attachment",
      "methodNameOverride": "upload-attachment"
    }
  ],
  "x-codat-docs-path": "bank-feeds-api",
  "tags": [
    {
      "name": "Companies",
      "description": "Create and manage your Codat companies."
    },
    {
      "name": "Connections",
      "description": "Manage your companies' data connections."
    },
    {
      "name": "Source accounts",
      "description": "Source accounts act as a bridge to bank accounts in accounting software."
    },
    {
      "name": "Account mapping",
      "description": "Bank feed bank account mapping."
    },
    {
      "name": "Transactions",
      "description": "Transactions represent debits and credits from a source account."
    }
  ],
  "paths": {
    "/companies": {
      "post": {
        "summary": "Create company",
        "tags": [
          "Companies"
        ],
        "operationId": "create-company",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "x-speakeasy-usage-example": true,
                "schema": {
                  "$ref": "#/components/schemas/Company"
                },
                "examples": {
                  "New Company": {
                    "value": {
                      "id": "ab12c58d-a678-4ebf-a159-ae99e1807bd0",
                      "name": "My First Company",
                      "description": "",
                      "platform": "",
                      "redirect": "https://link.codat.io/company/ab12c58d-a678-4ebf-a159-ae99e1807bd0",
                      "dataConnections": [],
                      "created": "2022-11-10T10:45:18.1950523Z",
                      "createdByUserName": "Dan Tzabar"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        },
        "description": "ï»¿Creates a new company that can be used to assign connections to. \n\nIf forbidden characters (see `name` pattern) are present in the request, a company will be created with the forbidden characters removed. For example, `Company (Codat[1])` with be created as `Company Codat1`.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyRequestBody"
              },
              "examples": {
                "Example with no description": {
                  "value": {
                    "name": "Technicalium"
                  }
                },
                "Example with a description": {
                  "value": {
                    "name": "Technicalium",
                    "description": "Technology services, including web and app design and development"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List companies",
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Companies"
                },
                "examples": {
                  "One company": {
                    "value": {
                      "results": [
                        {
                          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "name": "My Test Company",
                          "description": "My Test Company make testing software",
                          "platform": "",
                          "redirect": "https://link.codat.io/company/3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "lastSync": "2022-01-01T12:30:00.000Z",
                          "dataConnections": [
                            {
                              "id": "51baa045-4836-4317-a42e-3542e991e581",
                              "integrationId": "1c312d69-e638-46d4-ad31-72e6c3ba8390",
                              "integrationKey": "vjms",
                              "sourceId": "396c3158-5dd7-481b-a7c4-a795ca31792b",
                              "platformName": "Pandle",
                              "linkUrl": "https://link-api.codat.io/companies/3fa85f64-5717-4562-b3fc-2c963f66afa6/connections/51baa045-4836-4317-a42e-3542e991e581/start",
                              "status": "Linked",
                              "lastSync": "2022-01-01T12:30:00.000Z",
                              "created": "2022-01-01T11:30:00Z",
                              "sourceType": "Accounting"
                            }
                          ],
                          "created": "2022-01-01T11:30:00Z",
                          "createdByUserName": "Mike Smith"
                        }
                      ],
                      "pageNumber": 1,
                      "pageSize": 100,
                      "totalResults": 1,
                      "_links": {
                        "current": {
                          "href": "/companies?page=1&pageSize=100"
                        },
                        "self": {
                          "href": "/companies"
                        }
                      }
                    }
                  },
                  "List of Companies": {
                    "value": {
                      "results": [
                        {
                          "id": "d1568dde-adf6-11ed-afa1-0242ac120002",
                          "name": "Technicalium",
                          "description": "Technology services, including web and app design and development",
                          "platform": "",
                          "redirect": "https://link.codat.io/company/d1568dde-adf6-11ed-afa1-0242ac120002",
                          "lastSync": "2022-01-01T12:30:00.000Z",
                          "dataConnections": [
                            {
                              "id": "51baa045-4836-4317-a42e-3542e991e581",
                              "integrationId": "1c312d69-e638-46d4-ad31-72e6c3ba8390",
                              "integrationKey": "vjms",
                              "sourceId": "396c3158-5dd7-481b-a7c4-a795ca31792b",
                              "platformName": "Pandle",
                              "linkUrl": "https://link-api.codat.io/companies/d1568dde-adf6-11ed-afa1-0242ac120002/connections/51baa045-4836-4317-a42e-3542e991e581/start",
                              "status": "Linked",
                              "lastSync": "2022-01-01T12:30:00.000Z",
                              "created": "2022-01-01T11:30:00Z",
                              "sourceType": "Accounting"
                            }
                          ],
                          "created": "2022-01-01T11:30:00Z",
                          "createdByUserName": "Joe Bloggs"
                        },
                        {
                          "id": "096db70b-78de-4ff0-aa98-299cb5fe17a0",
                          "name": "Godata",
                          "description": "A new digital agency with a passion for creating amazing digital experiences",
                          "platform": "",
                          "redirect": "https://link.codat.io/company/096db70b-78de-4ff0-aa98-299cb5fe17a0",
                          "lastSync": "2022-01-01T12:30:00.000Z",
                          "dataConnections": [
                            {
                              "id": "a70bc148-dc21-46b2-a257-d9c58ac15cbb",
                              "integrationId": "1c312d69-e638-46d4-ad31-72e6c3ba8390",
                              "integrationKey": "vjms",
                              "sourceId": "396c3158-5dd7-481b-a7c4-a795ca31792b",
                              "platformName": "Pandle",
                              "linkUrl": "https://link-api.codat.io/companies/096db70b-78de-4ff0-aa98-299cb5fe17a0/connections/a70bc148-dc21-46b2-a257-d9c58ac15cbb/start",
                              "status": "Linked",
                              "lastSync": "2022-01-01T12:30:00.000Z",
                              "created": "2022-01-01T11:30:00Z",
                              "sourceType": "Accounting"
                            }
                          ],
                          "created": "2022-01-01T11:30:00Z",
                          "createdByUserName": "Mike Smith"
                        }
                      ],
                      "pageNumber": 1,
                      "pageSize": 100,
                      "totalResults": 2,
                      "_links": {
                        "current": {
                          "href": "/companies?page=1&pageSize=100"
                        },
                        "self": {
                          "href": "/companies"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Malformed-Query"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        },
        "operationId": "list-companies",
        "description": "ï»¿Returns a list of your companies. The company schema contains a list of [connections](https://docs.codat.io/bank-feeds-api#/schemas/Connection) related to the company.",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ]
      }
    },
    "/companies/{companyId}": {
      "get": {
        "summary": "Get company",
        "operationId": "get-company",
        "description": "ï»¿Returns the company for a valid identifier. If the identifier is for a deleted company, a not found response is returned.",
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          }
        ],
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "ab12c58d-a678-4ebf-a159-ae99e1807bd0",
                      "name": "My First Company",
                      "description": "",
                      "platform": "",
                      "redirect": "https://link.codat.io/company/ab12c58d-a678-4ebf-a159-ae99e1807bd0",
                      "dataConnections": [],
                      "created": "2022-11-10T10:45:18Z",
                      "createdByUserName": "Dan Tzabar"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      },
      "delete": {
        "summary": "Delete a company",
        "operationId": "delete-company",
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          }
        ],
        "description": "ï»¿\nPermanently deletes a company, its connections and any cached data. This operation is irreversible. If the company ID does not exist an error is returned.",
        "tags": [
          "Companies"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      },
      "put": {
        "summary": "Update company",
        "description": "ï»¿Updates both the name and description of the company.",
        "operationId": "update-company",
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          }
        ],
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyRequestBody"
              },
              "examples": {
                "Update name": {
                  "value": {
                    "name": "New Name"
                  }
                },
                "Update description": {
                  "value": {
                    "name": "Same name",
                    "description": "Additional documents required"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/companies/{companyId}/connections": {
      "get": {
        "summary": "List connections",
        "description": "ï»¿List the connections for a company.",
        "operationId": "list-connections",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connections"
                },
                "examples": {
                  "Connections": {
                    "value": {
                      "results": [
                        {
                          "id": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd",
                          "integrationId": "bf083d72-62c7-493e-aec9-81b4dbba7e2c",
                          "integrationKey": "dfxm",
                          "sourceId": "bdd831ce-eebd-4896-89a7-20e5ee8989ee",
                          "platformName": "Basiq",
                          "linkUrl": "https://link-api.codat.io/companies/86bd88cb-44ab-4dfb-b32f-87b19b14287f/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start",
                          "status": "Linked",
                          "lastSync": "2022-10-27T10:22:43.6464237Z",
                          "created": "2022-10-27T09:53:29Z",
                          "sourceType": "Banking"
                        }
                      ],
                      "pageNumber": 0,
                      "pageSize": 0,
                      "totalResults": 0,
                      "_links": {
                        "self": {
                          "href": "string"
                        },
                        "current": {
                          "href": "string"
                        },
                        "next": {
                          "href": "string"
                        },
                        "previous": {
                          "href": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Malformed-Query"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      },
      "post": {
        "summary": "Create connection",
        "description": "ï»¿Creates a connection for the company by providing a valid `platformKey`. \n\nUse the [List Integrations](https://docs.codat.io/bank-feeds-api#/operations/list-integrations) endpoint to access valid platform keys. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          }
        ],
        "tags": [
          "Connections"
        ],
        "operationId": "create-connection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "platformKey": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                },
                "examples": {
                  "Connection": {
                    "value": {
                      "id": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd",
                      "integrationId": "bf083d72-62c7-493e-aec9-81b4dbba7e2c",
                      "integrationKey": "dfxm",
                      "sourceId": "bdd831ce-eebd-4896-89a7-20e5ee8989ee",
                      "platformName": "Basiq",
                      "linkUrl": "https://link-api.codat.io/companies/86bd88cb-44ab-4dfb-b32f-87b19b14287f/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start",
                      "status": "Linked",
                      "lastSync": "2022-10-27T10:22:43.6464237Z",
                      "created": "2022-10-27T09:53:29Z",
                      "sourceType": "Banking"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      }
    },
    "/companies/{companyId}/connections/{connectionId}": {
      "get": {
        "summary": "Get connection",
        "operationId": "get-connection",
        "description": "ï»¿Returns a specific connection for a company when valid identifiers are provided. If the identifiers are for a deleted company and/or connection, a not found response is returned.",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          },
          {
            "$ref": "#/components/parameters/connectionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                },
                "examples": {
                  "Connection": {
                    "value": {
                      "id": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd",
                      "integrationId": "bf083d72-62c7-493e-aec9-81b4dbba7e2c",
                      "integrationKey": "dfxm",
                      "sourceId": "bdd831ce-eebd-4896-89a7-20e5ee8989ee",
                      "platformName": "Basiq",
                      "linkUrl": "https://link-api.codat.io/companies/86bd88cb-44ab-4dfb-b32f-87b19b14287f/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start",
                      "status": "Linked",
                      "lastSync": "2022-10-27T10:22:43.6464237Z",
                      "created": "2022-10-27T09:53:29Z",
                      "sourceType": "Banking"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      },
      "delete": {
        "summary": "Delete connection",
        "operationId": "delete-connection",
        "description": "ï»¿Revoke and remove a connection from a company.\nThis operation is not reversible. The end user would need to reauthorize a new data connection if you wish to view new data for this company.",
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          },
          {
            "$ref": "#/components/parameters/connectionId"
          }
        ],
        "tags": [
          "Connections"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      },
      "patch": {
        "summary": "Unlink connection",
        "description": "ï»¿This allows you to deauthorize a connection, without deleting it from Codat. This means you can still view any data that has previously been pulled into Codat, and also lets you re-authorize in future if your customer wishes to resume sharing their data.",
        "operationId": "unlink-connection",
        "x-speakeasy-name-override": "unlink",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          },
          {
            "$ref": "#/components/parameters/connectionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "Example": {
                  "value": {
                    "status": "Unlinked"
                  }
                }
              }
            }
          },
          "description": ""
        }
      }
    },
    "/companies/{companyId}/connections/{connectionId}/connectionInfo/bankFeedAccounts": {
      "post": {
        "tags": [
          "Source accounts"
        ],
        "summary": "Create source account",
        "description": "The _Create Source Account_ endpoint allows you to create a representation of a bank account within Codat's domain. This source account can later be mapped to a target account in your accounting software.\n\n#### Account Mapping Variability\n\nThe method of mapping this source account to your target account varies depending on the accounting package you use.\n\n#### Mapping Options:\n\n1. **API Mapping**: Integrate the mapping journey directly into your application for a seamless user experience.\n2. **Codat UI Mapping**: If you prefer a quicker setup, you can utilize Codat's provided user interface for mapping.\n3. **Accounting Platform Mapping**: For some accounting software, the mapping process must be conducted within the software itself.\n\n### Integration specific behaviour\n\n| Bank Feed Integration | API Mapping | Codat UI Mapping | Accounting Platform Mapping |\n| --------------------- | ----------- | ---------------- | --------------------------- |\n| Xero                  | â          | â               |                             |\n| FreeAgent             | â          | â               |                             |\n| QuickBooks Online     |             |                  | â                          |\n| Sage                  |             |                  | â                          |\n",
        "operationId": "create-source-account",
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          },
          {
            "$ref": "#/components/parameters/connectionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceAccount"
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      },
      "get": {
        "tags": [
          "Source accounts"
        ],
        "summary": "List source accounts",
        "description": "ï»¿The _List source accounts_ endpoint returns a list of [source accounts](https://docs.codat.io/bank-feeds-api#/schemas/BankFeedAccount) for a given company's connection.\n\n[source accounts](https://docs.codat.io/bank-feeds-api#/schemas/BankFeedAccount) are the bank's bank account within Codat's domain from which transactions are synced into the accounting platform.\n",
        "operationId": "list-source-accounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          },
          {
            "$ref": "#/components/parameters/connectionId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceAccount"
                },
                "examples": {}
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      }
    },
    "/companies/{companyId}/connections/{connectionId}/connectionInfo/bankFeedAccounts/{accountId}": {
      "patch": {
        "tags": [
          "Source accounts"
        ],
        "summary": "Update source account",
        "description": "ï»¿The _Update source account_ endpoint updates a single source account for a single data connection connected to a single company.\n",
        "operationId": "update-source-account",
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          },
          {
            "$ref": "#/components/parameters/connectionId"
          },
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceAccount"
              },
              "examples": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "x-speakeasy-usage-example": true,
                "schema": {
                  "$ref": "#/components/schemas/SourceAccount"
                },
                "examples": {}
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      },
      "delete": {
        "tags": [
          "Source accounts"
        ],
        "summary": "Delete source account",
        "description": "The _Delete source account_ endpoint enables you to remove a source account.\n\nRemoving a source account will also remove any mapping between the source bank feed bank accounts and the target bankfeed bank account.\n",
        "operationId": "delete-source-account",
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          },
          {
            "$ref": "#/components/parameters/connectionId"
          },
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      }
    },
    "/companies/{companyId}/connections/{connectionId}/connectionInfo/bankFeedAccounts/credentials": {
      "post": {
        "tags": [
          "Source accounts"
        ],
        "summary": "Generate source account credentials",
        "description": "ï»¿The _Generate Bank Account Credentials_ endpoint can be used to generate credentials for QuickBooks Online to use for authentication of the Bank Feed in their portal, each time this is used a new set of credentials will be generated.\n\nThe old credentials will still be valid until the revoke credentials endpoint is used, which will revoke all credentials associated to the data connection.\n",
        "operationId": "generate-credentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          },
          {
            "$ref": "#/components/parameters/connectionId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountCredentials"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      },
      "delete": {
        "tags": [
          "Source accounts"
        ],
        "summary": "Delete all source account credentials",
        "x-speakeasy-name-override": "delete-credentials",
        "description": "The _Delete Bank Account Credentials_ endpoint serves as a comprehensive mechanism for revoking all existing authorization credentials that a company employs to establish its Bank Feed connection.\n\nIn cases where multiple credential sets have been generated, a single API call to this endpoint revokes all of them.",
        "operationId": "delete-bank-feed-credentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          },
          {
            "$ref": "#/components/parameters/connectionId"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      }
    },
    "/companies/{companyId}/connections/{connectionId}/bankFeedAccounts/mapping": {
      "parameters": [
        {
          "$ref": "#/components/parameters/companyId"
        },
        {
          "$ref": "#/components/parameters/connectionId"
        }
      ],
      "get": {
        "tags": [
          "Account mapping"
        ],
        "summary": "List bank feed account mappings",
        "description": "ï»¿The *List bank account mappings* endpoint returns information about a source bank account and any current or potential target mapping accounts.\n\nA bank feed account mapping is a specified link between the source account (provided by the Codat user) and the target account (the end users account in the underlying platform).\n\nThis endpoint is only needed if building an account management UI.",
        "operationId": "get-bank-account-mapping",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankFeedMapping"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Account mapping"
        ],
        "summary": "Create bank feed account mapping",
        "description": "ï»¿The *Create bank account mapping* endpoint creates a new mapping between a source bank account and a potential account in the accounting platform (target account).\n\nA bank feed account mapping is a specified link between the source account (provided by the Codat user) and the target account (the end users account in the underlying platform).\n\nTo find valid target account options, first call list bank feed account mappings.\n\nThis endpoint is only needed if building an account management UI.",
        "operationId": "create-bank-account-mapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Bank feed account mapping",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "sourceAccountId": {
                    "type": "string",
                    "description": "Unique ID for the source account"
                  },
                  "targetAccountId": {
                    "type": "string",
                    "nullable": true,
                    "description": "Unique ID for the target account"
                  },
                  "feedStartDate": {
                    "$ref": "#/components/schemas/DateTime",
                    "nullable": true,
                    "description": "Date to start importing transactions from"
                  }
                },
                "description": "A bank feed connection between a source account and a target account.",
                "examples": [
                  {
                    "sourceAccountId": "acc-002",
                    "targetAccountId": "account-081",
                    "feedStartDate": "2023-01-09T14:14:14.1057478Z"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankFeedAccountMappingResponse"
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      }
    },
    "/companies/{companyId}/connections/{connectionId}/push/bankAccounts/{accountId}/bankTransactions": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create bank transactions",
        "description": "ï»¿The *Create bank transactions* endpoint creates new [bank transactions](https://docs.codat.io/bank-feeds-api#/schemas/BankTransactions) for a given company's connection.\n\n[Bank transactions](https://docs.codat.io/bank-feeds-api#/schemas/BankTransactions) are records of monetary amounts that have moved in and out of an SMB's bank account.\n\n**Integration-specific behaviour**\n\nRequired data may vary by integration. To see what data to post, first call [Get create bank transaction model](https://docs.codat.io/bank-feeds-api#/operations/get-create-bankTransactions-model).\n\nCheck out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bankTransactions) for integrations that support creating a bank account transactions.\n",
        "operationId": "create-bank-transactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/companyId"
          },
          {
            "$ref": "#/components/parameters/connectionId"
          },
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "x-stoplight": {
              "id": "irz50qjbs3yef"
            },
            "name": "timeoutInMinutes",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "x-stoplight": {
              "id": "kc8ehjqr6p02q"
            },
            "name": "allowSyncOnPushComplete",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Create bank account transactions",
                "type": "object",
                "properties": {
                  "accountId": {
                    "$ref": "#/components/schemas/CreateBankTransactions/properties/accountId"
                  },
                  "transactions": {
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1companies~1%7BcompanyId%7D~1connections~1%7BconnectionId%7D~1push~1bankAccounts~1%7BaccountId%7D~1bankTransactions/post/requestBody/content/application~1json/schema/definitions/CreateBankAccountTransaction"
                    }
                  }
                },
                "definitions": {
                  "CreateBankAccountTransaction": {
                    "title": "bank account transaction",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "number",
                        "format": "decimal"
                      },
                      "date": {
                        "$ref": "#/components/schemas/DateTime"
                      },
                      "description": {
                        "nullable": false,
                        "type": "string"
                      },
                      "balance": {
                        "type": "number",
                        "format": "decimal"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBankTransactionsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      }
    },
    "/companies/{companyId}/push/{pushOperationKey}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/companyId"
        },
        {
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "name": "pushOperationKey",
          "in": "path",
          "required": true,
          "description": "Push operation key."
        }
      ],
      "get": {
        "summary": "Get create operation",
        "tags": [
          "Transactions"
        ],
        "operationId": "get-create-operation",
        "x-speakeasy-name-override": "get-create-operation",
        "description": "Retrieve push operation.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushOperation"
                },
                "examples": {}
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      }
    },
    "/companies/{companyId}/push": {
      "parameters": [
        {
          "$ref": "#/components/parameters/companyId"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "summary": "List create operations",
        "tags": [
          "Transactions"
        ],
        "operationId": "list-create-operations",
        "x-speakeasy-name-override": "list-create-operations",
        "description": "List create operations.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushOperations"
                },
                "examples": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Malformed-Query"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Not-Found"
          },
          "429": {
            "$ref": "#/components/responses/Too-Many-Requests"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Company": {
        "title": "Company",
        "description": "ï»¿In Codat, a company represents a business sharing access to their data. Each company can have multiple [connections](https://docs.codat.io/bank-feeds-api#/schemas/Connection) to different data sources such as one connection to [Xero](https://docs.codat.io/integrations/accounting/xero/accounting-xero) for accounting data, two connections to [Plaid](https://docs.codat.io/integrations/banking/plaid/banking-plaid) for two bank accounts and a connection to [Zettle](https://docs.codat.io/integrations/commerce/zettle/commerce-zettle) for POS data.\n\nTypically each company is one of your customers.\n\nWhen you create a company, you can specify a `name` and we will automatically generate a unique `id` for the company. You can also add a `description` to store any additional information about the company.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/parameters/companyId/schema"
          },
          "name": {
            "type": "string",
            "description": "The name of the company",
            "example": "Codat Ltd."
          },
          "description": {
            "type": "string",
            "example": "Requested early access to the new financing scheme.",
            "description": "Additional information about the company. This can be used to store foreign IDs, references, etc."
          },
          "platform": {
            "type": "string",
            "deprecated": true,
            "example": "Xero"
          },
          "redirect": {
            "type": "string",
            "format": "uri",
            "description": "The `redirect` [Link URL](https://docs.codat.io/auth-flow/authorize-hosted-link) enabling the customer to start their auth flow journey for the company.",
            "example": "https://link.codat.io/company/27628208-459c-46a2-a705-5641ce25f739"
          },
          "lastSync": {
            "$ref": "#/components/schemas/DateTime"
          },
          "created": {
            "$ref": "#/components/schemas/DateTime"
          },
          "createdByUserName": {
            "type": "string"
          },
          "dataConnections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connection"
            }
          }
        },
        "required": [
          "id",
          "name",
          "redirect"
        ],
        "examples": [
          {
            "id": "0498e921-9b53-4396-a412-4f2f5983b0a2",
            "name": "string",
            "platform": "string",
            "redirect": "https://link.codat.io/company/27628208-459c-46a2-a705-5641ce25f739",
            "lastSync": "2022-01-01T12:00:00.000Z",
            "created": "2022-01-01T12:00:00.000Z",
            "createdByUserName": "string",
            "dataConnections": [
              {
                "id": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd",
                "integrationId": "bf083d72-62c7-493e-aec9-81b4dbba7e2c",
                "integrationKey": "dfxm",
                "sourceId": "bdd831ce-eebd-4896-89a7-20e5ee8989ee",
                "platformName": "Basiq",
                "linkUrl": "https://link-api.codat.io/companies/86bd88cb-44ab-4dfb-b32f-87b19b14287f/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start",
                "status": "Linked",
                "lastSync": "2022-10-27T10:22:43.6464237Z",
                "created": "2022-10-27T09:53:29Z",
                "sourceType": "Banking"
              }
            ]
          }
        ]
      },
      "Companies": {
        "title": "Companies",
        "x-internal": true,
        "allOf": [
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          {
            "type": "object",
            "title": "Pagination information",
            "x-internal": true,
            "properties": {
              "pageNumber": {
                "type": "integer"
              },
              "pageSize": {
                "type": "integer"
              },
              "totalResults": {
                "type": "integer"
              },
              "_links": {
                "$ref": "#/components/schemas/Companies/allOf/1/definitions/links"
              }
            },
            "definitions": {
              "links": {
                "title": "Hal Links",
                "type": "object",
                "required": [
                  "self",
                  "current"
                ],
                "properties": {
                  "self": {
                    "$ref": "#/components/schemas/Companies/allOf/1/definitions/halRef"
                  },
                  "current": {
                    "$ref": "#/components/schemas/Companies/allOf/1/definitions/halRef"
                  },
                  "next": {
                    "$ref": "#/components/schemas/Companies/allOf/1/definitions/halRef"
                  },
                  "previous": {
                    "$ref": "#/components/schemas/Companies/allOf/1/definitions/halRef"
                  }
                },
                "examples": [
                  {
                    "self": {
                      "href": "/companies/{id}/data/{dataType}"
                    },
                    "current": {
                      "href": "/companies/{id}/data/{dataType}?page=1&pageSize=10"
                    }
                  }
                ]
              },
              "halRef": {
                "title": "Hypertext reference",
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string",
                    "format": "uri-reference"
                  }
                }
              }
            },
            "required": [
              "pageNumber",
              "pageSize",
              "totalResults",
              "_links"
            ],
            "examples": [
              {
                "_links": {
                  "pageNumber": 1,
                  "pageSize": 10,
                  "totalResults": 1,
                  "self": {
                    "href": "/companies/{id}/data/{dataType}"
                  },
                  "current": {
                    "href": "/companies/{id}/data/{dataType}?page=1&pageSize=10"
                  }
                }
              }
            ]
          }
        ]
      },
      "CompanyRequestBody": {
        "title": "Create company request",
        "x-internal": true,
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of company being connected.",
            "pattern": "^[A-Za-z0-9\\s\\-',&@.,?!\\s]+$",
            "minLength": 1,
            "example": "Bank of Dave"
          },
          "description": {
            "$ref": "#/components/schemas/Company/properties/description"
          }
        },
        "required": [
          "name"
        ]
      },
      "Connection": {
        "title": "Connection",
        "description": "ï»¿A connection represents a [company's](https://docs.codat.io/bank-feeds-api#/schemas/Company) connection to a data source and allows you to synchronize data (pull and/or push) with that source.\n\nA company can have multiple data connections depending on the type of data source it is connecting to. For example, a single company can link to:\n\n- [Accounting data](https://docs.codat.io/accounting-api/overview) - 1 active connection.\n- [Banking data](https://docs.codat.io/banking-api/overview) - Multiple active connections.\n- [Commerce data](https://docs.codat.io/commerce-api/overview) - Multiple active connections.\nAny combination of accounting, banking, and commerce data connections is allowed.\n\nBefore you can use a data connection to pull or push data, the company must grant you access to their business data by [linking the connection](https://docs.codat.io/auth-flow/overview).",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/parameters/connectionId/schema"
          },
          "integrationId": {
            "type": "string",
            "format": "uuid",
            "example": "fd321cb6-7963-4506-b873-e99593a45e30",
            "description": "A Codat ID representing the integration."
          },
          "integrationKey": {
            "type": "string",
            "description": "A unique four-character ID that identifies the platform of the company's data connection. This ensures continuity if the platform changes its name in the future."
          },
          "sourceId": {
            "type": "string",
            "format": "uuid",
            "example": "35b92968-9851-4095-ad60-395c95cbcba4",
            "description": "A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`."
          },
          "sourceType": {
            "title": "Source Type",
            "x-internal": true,
            "description": "The type of platform of the connection.",
            "type": "string",
            "enum": [
              "Accounting",
              "Banking",
              "Commerce",
              "Other",
              "Unknown"
            ],
            "example": "Accounting"
          },
          "platformName": {
            "type": "string"
          },
          "linkUrl": {
            "type": "string",
            "format": "uri",
            "example": "https://link-api.codat.io/companies/86bd88cb-44ab-4dfb-b32f-87b19b14287f/connections/2e2eb431-c1fa-4dc9-93fa-d29781c12bcd/start"
          },
          "status": {
            "$ref": "#/components/schemas/Connection/definitions/dataConnectionStatus"
          },
          "lastSync": {
            "$ref": "#/components/schemas/DateTime"
          },
          "created": {
            "$ref": "#/components/schemas/DateTime"
          },
          "dataConnectionErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connection/definitions/dataConnectionError"
            }
          },
          "connectionInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "required": [
          "id",
          "integrationId",
          "integrationKey",
          "sourceId",
          "platformName",
          "linkUrl",
          "status",
          "created",
          "sourceType"
        ],
        "definitions": {
          "dataConnectionStatus": {
            "title": "Data connection status",
            "description": "The current authorization status of the data connection.",
            "type": "string",
            "enum": [
              "PendingAuth",
              "Linked",
              "Unlinked",
              "Deauthorized"
            ]
          },
          "dataConnectionError": {
            "title": "Data connection error",
            "type": "object",
            "properties": {
              "statusCode": {
                "type": "string"
              },
              "statusText": {
                "type": "string"
              },
              "errorMessage": {
                "type": "string"
              },
              "erroredOnUtc": {
                "$ref": "#/components/schemas/DateTime"
              }
            }
          },
          "dataConnectionSourceType": {
            "title": "Source Type",
            "description": "The type of platform of the connection.",
            "type": "string",
            "enum": [
              "Accounting",
              "Banking",
              "Commerce",
              "Other",
              "Unknown"
            ],
            "example": "Accounting"
          }
        },
        "example": {
          "id": "ee2eb431-c0fa-4dc9-93fa-d29781c12bcd",
          "integrationId": "bf083d72-62c7-493e-aec9-81b4dbba7e2c",
          "integrationKey": "dfxm",
          "sourceId": "bdd831ce-eebd-4896-89a7-20e5ee8989ee",
          "platformName": "Basiq",
          "linkUrl": "https://link-api.codat.io/companies/86bd88cb-44ab-4dfb-b32f-87b19b14287f/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start",
          "status": "Linked",
          "lastSync": "2022-10-27T10:22:43.6464237Z",
          "created": "2022-10-27T09:53:29Z",
          "sourceType": "Banking"
        }
      },
      "Connections": {
        "title": "Connections",
        "x-internal": true,
        "allOf": [
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/Companies/allOf/1"
          }
        ]
      },
      "SourceAccount": {
        "title": "Source Account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the bank account"
          },
          "accountName": {
            "type": "string",
            "nullable": true,
            "description": "The bank account name"
          },
          "accountType": {
            "type": "string",
            "nullable": true,
            "description": "The type of bank account e.g. Credit"
          },
          "accountNumber": {
            "type": "string",
            "nullable": true,
            "description": "The account number"
          },
          "sortCode": {
            "type": "string",
            "nullable": true,
            "description": "The sort code"
          },
          "currency": {
            "title": "Currency",
            "x-internal": true,
            "type": "string",
            "description": "The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.\n\n## Unknown currencies\n\nIn line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. \n\nThere are only a very small number of edge cases where this currency code is returned by the Codat system.",
            "format": "ISO4217",
            "examples": [
              "GBP",
              "USD",
              "EUR"
            ]
          },
          "balance": {
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "description": "The latest balance for the bank account"
          },
          "modifiedDate": {
            "$ref": "#/components/schemas/DateTime",
            "nullable": true,
            "description": "The last date the bank account was modified"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "feedStartDate": {
            "$ref": "#/components/schemas/DateTime",
            "nullable": true
          }
        },
        "required": [
          "id"
        ],
        "description": "The target bank account in a supported accounting package for ingestion into a bank feed.",
        "examples": [
          {
            "id": "acc-002",
            "accountName": "account-081",
            "sortCode": "123456",
            "accountType": "Credit",
            "accountNumber": "12345670",
            "currency": "GBP",
            "balance": 99.99,
            "modifiedDate": "2023-01-09T14:14:14.1057478Z",
            "status": "pending"
          },
          {
            "id": "acc-003",
            "accountName": "account-095",
            "sortCode": "123456",
            "accountType": "Credit",
            "accountNumber": "12345671",
            "currency": "USD",
            "balance": 0,
            "modifiedDate": "2023-01-09T14:14:14.1057478Z",
            "status": "pending"
          }
        ]
      },
      "BankFeedAccountMapping": {
        "x-internal": true,
        "$ref": "#/paths/~1companies~1%7BcompanyId%7D~1connections~1%7BconnectionId%7D~1bankFeedAccounts~1mapping/post/requestBody/content/application~1json/schema"
      },
      "BankFeedAccountMappingResponse": {
        "title": "Bank feed account mapping response",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "sourceAccountId": {
            "type": "string",
            "description": "Unique ID for the source account."
          },
          "targetAccountId": {
            "type": "string",
            "nullable": true,
            "description": "Unique ID for the target account."
          },
          "Status": {
            "type": "string",
            "nullable": true,
            "description": "Status of the POST request."
          },
          "Error": {
            "type": "string",
            "nullable": true,
            "description": "Error returned during the post request"
          }
        },
        "description": "The result from POSTing a Bank Account mapping.",
        "examples": [
          {
            "sourceAccountId": "acc-002",
            "targetAccountId": "account-081",
            "Status": "Failed",
            "Error": "A feed connection already exists to this account"
          }
        ]
      },
      "BankFeedMapping": {
        "title": "Bank feed mapping",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "sourceAccountId": {
            "type": "string",
            "description": "Unique ID for the source account."
          },
          "sourceAccountName": {
            "type": "string",
            "description": "Name for the source account."
          },
          "sourceAccountNumber": {
            "type": "string",
            "description": "Account number for the source account."
          },
          "sourceBalance": {
            "type": "string",
            "description": "Balance for the source account."
          },
          "sourceCurrency": {
            "$ref": "#/components/schemas/SourceAccount/properties/currency"
          },
          "targetAccountId": {
            "type": "string",
            "nullable": true,
            "description": "Unique ID for the target account in the accounting platform."
          },
          "targetAccountName": {
            "type": "string",
            "description": "Name for the target account in the accounting platform."
          },
          "status": {
            "type": "string"
          },
          "targetAccountOptions": {
            "type": "array",
            "nullable": true,
            "description": "An array of potential target accounts.",
            "items": {
              "$ref": "#/components/schemas/BankFeedMapping/definitions/targetAccountOption"
            }
          },
          "feedStartDate": {
            "$ref": "#/components/schemas/DateTime",
            "nullable": true,
            "description": "The date from which bank transactions can be provided to the platform."
          }
        },
        "description": "A bank feed connection between a source account and a target account, including potential target accounts.",
        "definitions": {
          "targetAccountOption": {
            "title": "Target Account Option",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the target account."
              },
              "name": {
                "type": "string",
                "nullable": true,
                "description": "Name of the target account."
              },
              "balance": {
                "type": "number",
                "format": "decimal",
                "nullable": true,
                "description": "The balance of the account."
              },
              "sortCode": {
                "type": "string",
                "nullable": true,
                "description": "The sort code of the account."
              },
              "accountNumber": {
                "type": "string",
                "nullable": true,
                "description": "The account number of the account."
              }
            }
          }
        },
        "examples": [
          {
            "sourceAccountId": "acc-002",
            "targetAccountId": "account-081",
            "sourceCurrency": "USD",
            "status": "Success",
            "feedStartDate": "2023-01-09T14:14:14.1057478Z",
            "sourceAccountName": "ACME Bank",
            "sourceAccountNumber": "1234-5678",
            "sourceBalance": 500,
            "targetAccountName": "ACME Bank"
          },
          {
            "sourceAccountId": "c53fd75a-dddb-4493-839a-5090b008f625",
            "status": "pending",
            "targetAccountOptions": [
              {
                "name": "account-081",
                "id": "044096a7-1478-4554-8820-f478caad1b00",
                "balance": 100.99,
                "sortCode": "602336",
                "accountNumber": "23203"
              }
            ],
            "sourceAccountName": "bank name here",
            "sourceAccountNumber": "5670",
            "sourceBalance": 1550,
            "sourceCurrency": "GBP"
          }
        ]
      },
      "SourceAccounts": {
        "title": "Source accounts",
        "x-internal": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SourceAccount"
        }
      },
      "BankTransactions": {
        "title": "Bank account transaction",
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "clearedOnDate": {
                "$ref": "#/components/schemas/DateTime"
              },
              "description": {
                "type": "string",
                "nullable": true
              },
              "counterparty": {
                "type": "string",
                "nullable": true
              },
              "reference": {
                "type": "string",
                "nullable": true
              },
              "reconciled": {
                "type": "boolean"
              },
              "amount": {
                "type": "number",
                "format": "decimal"
              },
              "balance": {
                "type": "number",
                "format": "decimal"
              },
              "transactionType": {
                "title": "Bank transaction type",
                "description": "Type of transaction for the bank statement line",
                "type": "string",
                "enum": [
                  "Unknown",
                  "Credit",
                  "Debit",
                  "Int",
                  "Div",
                  "Fee",
                  "SerChg",
                  "Dep",
                  "Atm",
                  "Pos",
                  "Xfer",
                  "Check",
                  "Payment",
                  "Cash",
                  "DirectDep",
                  "DirectDebit",
                  "RepeatPmt",
                  "Other"
                ]
              }
            }
          },
          {
            "title": "Modified dates",
            "x-internal": true,
            "allOf": [
              {
                "title": "ModifiedDate",
                "x-internal": true,
                "type": "object",
                "properties": {
                  "modifiedDate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DateTime"
                      },
                      {
                        "description": "The date when the record was last fetched from the data source and updated in Codatâs data cache. \n\nUse it to identify and retrieve records that have changed since your last fetch. For example, filtering `modifiedDate` to today will provide new records updated in Codat today.\n\nThis date is populated for all data types except for attachments, balance sheets, company information, and profit & loss reports ([read more](https://docs.codat.io/using-the-api/modified-dates#modified-date)).\n\nIn Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>."
                      }
                    ]
                  }
                }
              },
              {
                "title": "Source Modified Date",
                "x-internal": true,
                "type": "object",
                "nullable": true,
                "properties": {
                  "sourceModifiedDate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DateTime"
                      },
                      {
                        "description": "The date when a record was last modified in the source platform, usually by the business or a business process. For example, when payments are made against an invoice. \n\nIt is not populated ([read more](https://docs.codat.io/using-the-api/modified-dates#source-modified-date)) when:\n  - Pulling attachments\n  - The integration platform does not provide modification dates for a data type\n  - A record has been deleted from the source platform and Codat doesn't have a record of when the deletion occurred\n  - A record has been voided. For certain platforms that soft delete records, `isDeleted` metadata is used to identify void records\n\nIn Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>."
                      }
                    ]
                  }
                }
              }
            ]
          }
        ]
      },
      "CreateBankTransactions": {
        "title": "Create bank account transactions",
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "examples": {
              "$ref": "#/components/parameters/accountId/schema/examples"
            }
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateBankTransactions/definitions/CreateBankAccountTransaction"
            }
          }
        },
        "definitions": {
          "CreateBankAccountTransaction": {
            "title": "bank account transaction",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/BankTransactions/allOf/0/properties/id"
              },
              "amount": {
                "$ref": "#/components/schemas/BankTransactions/allOf/0/properties/amount"
              },
              "date": {
                "$ref": "#/components/schemas/DateTime"
              },
              "description": {
                "$ref": "#/components/schemas/BankTransactions/allOf/0/properties/description",
                "nullable": false
              },
              "balance": {
                "$ref": "#/components/schemas/BankTransactions/allOf/0/properties/balance"
              }
            }
          }
        }
      },
      "CreateBankTransactionsResponse": {
        "title": "Create bank transaction response",
        "x-internal": true,
        "allOf": [
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/CreateBankTransactions"
              }
            }
          },
          {
            "$ref": "#/components/schemas/PushOperation"
          }
        ]
      },
      "DateTime": {
        "title": "Date time",
        "type": "string",
        "examples": [
          "2022-10-23T00:00:00.000Z",
          "2022-10-23T00:00:00.000Z"
        ],
        "description": "In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:\n\n```\n2020-10-08T22:40:50Z\n2021-01-01T00:00:00\n```\n\n\n\nWhen syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:\n\n- Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`\n- Unqualified local time: `2021-11-15T01:00:00`\n- UTC time offsets: `2021-11-15T01:00:00-05:00`\n\n> Time zones\n> \n> Not all dates from Codat will contain information about time zones.  \n> Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced."
      },
      "DataType": {
        "title": "Data types",
        "x-internal": true,
        "type": "string",
        "description": "Available Data types",
        "enum": [
          "accountTransactions",
          "balanceSheet",
          "bankAccounts",
          "bankTransactions",
          "billCreditNotes",
          "billPayments",
          "bills",
          "cashFlowStatement",
          "chartOfAccounts",
          "company",
          "creditNotes",
          "customers",
          "directCosts",
          "directIncomes",
          "invoices",
          "items",
          "journalEntries",
          "journals",
          "paymentMethods",
          "payments",
          "profitAndLoss",
          "purchaseOrders",
          "salesOrders",
          "suppliers",
          "taxRates",
          "trackingCategories",
          "transfers",
          "banking-accountBalances",
          "banking-accounts",
          "banking-transactionCategories",
          "banking-transactions",
          "commerce-companyInfo",
          "commerce-customers",
          "commerce-disputes",
          "commerce-locations",
          "commerce-orders",
          "commerce-paymentMethods",
          "commerce-payments",
          "commerce-productCategories",
          "commerce-products",
          "commerce-taxComponents",
          "commerce-transactions"
        ],
        "example": "invoices"
      },
      "BankAccountCredentials": {
        "title": "Bank Account Credentials",
        "description": "Result of generate credentials",
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "S0MW-TR0P-7DS0",
            "description": "Username used by the bank feeds platform to retrieve transactions"
          },
          "password": {
            "type": "string",
            "example": "cO0ajh0uGyTN0Pwh",
            "description": "Password to enable the bank feeds platform to securely retrieve transactions."
          }
        },
        "examples": {
          "QuickBooks Online Bank Feeds": {
            "username": "S0MW-TR0P-7DS0",
            "password": "cO0ajh0uGyTN0Pwh"
          }
        }
      },
      "PullOperation": {
        "title": "Pull operation",
        "description": "Information about a queued, in progress or completed pull operation.\n*Formally called `dataset`*",
        "x-stoplight": {
          "id": "hvk8xbvt7ekyg"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "943accd0-4247-42d8-865b-363c8629e1da"
          },
          "companyId": {
            "type": "string",
            "format": "uuid",
            "example": "22ece347-e5f6-4896-95e0-35a4c7f17023"
          },
          "connectionId": {
            "type": "string",
            "format": "uuid",
            "example": "50830828-7d39-4367-b0eb-5ddb2de5faa5"
          },
          "dataType": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Initial",
              "Queued",
              "Fetching",
              "MapQueued",
              "Mapping",
              "Complete",
              "FetchError",
              "MapError",
              "InternalError",
              "ProcessingQueued",
              "Processing",
              "ProcessingError",
              "ValidationQueued",
              "Validating",
              "ValidationError",
              "AuthError",
              "Cancelled",
              "Routing",
              "RoutingError",
              "NotSupported",
              "RateLimitError",
              "PermissionsError",
              "PrerequisiteNotMet"
            ],
            "example": "Complete"
          },
          "requested": {
            "$ref": "#/components/schemas/DateTime"
          },
          "progress": {
            "type": "integer"
          },
          "isCompleted": {
            "type": "boolean"
          },
          "isErrored": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "companyId",
          "connectionId",
          "dataType",
          "status",
          "requested",
          "progress",
          "isCompleted",
          "isErrored"
        ],
        "examples": [
          {
            "id": "97d60846-f07a-4d42-b5a0-0bdcc6ebf56b",
            "companyId": "4645bd78-8988-45bc-ac9e-67ba5df6e4e5",
            "connectionId": "51baa045-4836-4317-a42e-3542e991e581",
            "dataType": "invoices",
            "status": "Initial",
            "requested": "2022-11-14T11:18:37.2798351Z",
            "progress": 10,
            "isCompleted": false,
            "isErrored": false
          }
        ]
      },
      "PullOperations": {
        "title": "Pull operations",
        "x-internal": true,
        "allOf": [
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PullOperation"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/Companies/allOf/1"
          }
        ]
      },
      "PushOperation": {
        "title": "Push operation",
        "type": "object",
        "x-internal": true,
        "properties": {
          "changes": {
            "type": "array",
            "nullable": true,
            "description": "Contains a single entry that communicates which record has changed and the manner in which it changed. ",
            "items": {
              "$ref": "#/components/schemas/PushOperation/definitions/pushOperationChange"
            }
          },
          "dataType": {
            "$ref": "#/components/schemas/DataType",
            "description": "The type of data being pushed, eg invoices, customers."
          },
          "companyId": {
            "$ref": "#/components/parameters/companyId/schema"
          },
          "pushOperationKey": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted."
          },
          "dataConnectionKey": {
            "$ref": "#/components/parameters/connectionId/schema"
          },
          "requestedOnUtc": {
            "$ref": "#/components/schemas/DateTime",
            "description": "The datetime when the push was requested."
          },
          "completedOnUtc": {
            "$ref": "#/components/schemas/DateTime",
            "description": "The datetime when the push was completed, null if Pending."
          },
          "timeoutInMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timeoutInSeconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "status": {
            "$ref": "#/components/schemas/PushOperation/definitions/pushOperationStatus"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "validation": {
            "$ref": "#/components/schemas/PushOperation/definitions/validation"
          },
          "statusCode": {
            "type": "integer"
          }
        },
        "required": [
          "companyId",
          "pushOperationKey",
          "dataConnectionKey",
          "requestedOnUtc",
          "status",
          "statusCode"
        ],
        "definitions": {
          "validation": {
            "type": "object",
            "title": "Validation",
            "description": "A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.",
            "properties": {
              "errors": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/PushOperation/definitions/validationItem"
                }
              },
              "warnings": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/PushOperation/definitions/validationItem"
                }
              }
            }
          },
          "validationItem": {
            "title": "Validation item",
            "type": "object",
            "properties": {
              "itemId": {
                "type": "string",
                "nullable": true
              },
              "message": {
                "type": "string",
                "nullable": true
              },
              "validatorName": {
                "type": "string",
                "nullable": true
              }
            },
            "additionalProperties": false
          },
          "pushChangeType": {
            "title": "Push change type",
            "type": "string",
            "enum": [
              "Unknown",
              "Created",
              "Modified",
              "Deleted",
              "AttachmentUploaded"
            ]
          },
          "pushOperationRef": {
            "title": "Push operation reference",
            "x-internal": true,
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "dataType": {
                "$ref": "#/components/schemas/DataType",
                "nullable": true
              }
            },
            "additionalProperties": false
          },
          "pushOperationStatus": {
            "title": "Push operation status",
            "type": "string",
            "enum": [
              "Pending",
              "Failed",
              "Success",
              "TimedOut"
            ],
            "description": "The status of the push operation."
          },
          "pushOperationChange": {
            "type": "object",
            "properties": {
              "type": {
                "$ref": "#/components/schemas/PushOperation/definitions/pushChangeType"
              },
              "recordRef": {
                "$ref": "#/components/schemas/PushOperation/definitions/pushOperationRef"
              },
              "attachmentId": {
                "type": "string",
                "nullable": true
              }
            }
          }
        }
      },
      "PushOperations": {
        "title": "Push operations",
        "x-internal": true,
        "allOf": [
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PushOperation"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/Companies/allOf/1"
          }
        ]
      },
      "ErrorMessage": {
        "title": "Error message",
        "type": "object",
        "x-internal": true,
        "properties": {
          "statusCode": {
            "type": "integer"
          },
          "service": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "canBeRetried": {
            "type": "string"
          },
          "detailedErrorCode": {
            "type": "integer"
          }
        }
      }
    },
    "parameters": {
      "companyId": {
        "name": "companyId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "8a210b68-6988-11ed-a1eb-0242ac120002",
          "description": "Unique identifier for your SMB in Codat."
        }
      },
      "connectionId": {
        "name": "connectionId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "2e9d2c44-f675-40ba-8049-353bfcb5e171",
          "description": "Unique identifier for a company's data connection."
        }
      },
      "accountId": {
        "name": "accountId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "examples": [
            "13d946f0-c5d5-42bc-b092-97ece17923ab",
            "9wg4lep4ush5cxs79pl8sozmsndbaukll3ind4g7buqbm1h2",
            7110701885,
            "EILBDVJVNUAGVKRQ"
          ]
        },
        "description": "Unique identifier for an account"
      },
      "page": {
        "name": "page",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "example": 1,
          "default": 1
        },
        "description": "Page number. [Read more](https://docs.codat.io/using-the-api/paging)."
      },
      "pageSize": {
        "name": "pageSize",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int32",
          "default": 100,
          "example": 100,
          "minimum": 1,
          "maximum": 5000
        },
        "description": "Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging)."
      },
      "query": {
        "name": "query",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "-modifiedDate",
        "description": "Codat query string. [Read more](https://docs.codat.io/using-the-api/querying)."
      },
      "orderBy": {
        "name": "orderBy",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "-modifiedDate"
        },
        "description": "Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).",
        "x-stoplight": {
          "id": "4je9lwo02netu"
        }
      },
      "dataType": {
        "name": "dataType",
        "description": "The key of a Codat data type",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/DataType"
        }
      },
      "datasetId": {
        "name": "datasetId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "eaed9f0f-e77b-4bc9-a58f-ab8b4b99ab18"
        },
        "description": "Unique ID of a dataset or pull operation."
      }
    },
    "responses": {
      "BadRequest": {
        "description": "The request made is not valid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Malformed query": {
                "value": {
                  "statusCode": 400,
                  "service": "PublicApi",
                  "error": "Error processing request - not valid.",
                  "correlationId": "bc997528a9d7abb9161ef45f05d38599",
                  "canBeRetried": "Unknown",
                  "detailedErrorCode": 0
                }
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Your API request was not properly authorized.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Unauthorized": {
                "value": {
                  "statusCode": 401,
                  "service": "PublicApi",
                  "error": "Unauthorized",
                  "correlationId": "7eb40d6b415d7bcd99ce658268284056",
                  "canBeRetried": "Unknown",
                  "detailedErrorCode": 0
                }
              }
            }
          }
        }
      },
      "Malformed-Query": {
        "description": "Your `query` parameter was not correctly formed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Malformed query": {
                "value": {
                  "statusCode": 400,
                  "service": "ClientsApi",
                  "error": "Error parsing query - Malformed query.",
                  "correlationId": "bc997528a9d7abb9161ef45f05d38599",
                  "canBeRetried": "Unknown",
                  "detailedErrorCode": 0
                }
              }
            }
          }
        }
      },
      "Not-Found": {
        "description": "One or more of the resources you referenced could not be found.\nThis might be because your company or data connection id is wrong, or was already deleted.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Data connection not found": {
                "value": {
                  "statusCode": 404,
                  "service": "PublicApi",
                  "error": "Data connection a22dd66b-564a-4832-9b37-7b3ce4aeb7de not found",
                  "correlationId": "8fa2b5f4794970a4ee73758f612e8df0",
                  "canBeRetried": "Unknown",
                  "detailedErrorCode": 0
                }
              },
              "Company not found": {
                "value": {
                  "statusCode": 404,
                  "service": "ClientsApi",
                  "error": "No company was found with ID 846ed55c-974b-4392-a1f1-87b6fdbf3c5e",
                  "correlationId": "0a40c2f31fc8f992fb88b0853e4166f3",
                  "canBeRetried": "Unknown",
                  "detailedErrorCode": 0
                }
              },
              "No data available": {
                "value": {
                  "statusCode": 404,
                  "service": "PublicApi",
                  "error": "No data available for accounts for ID e5889b459f544926ac5b8e6756df2s",
                  "correlationId": "0a40c2f31fc8f992fb88b0853e4166f3",
                  "canBeRetried": "Unknown",
                  "detailedErrorCode": 0
                }
              }
            }
          }
        }
      },
      "Conflict": {
        "description": "The data type's dataset has not been requested or is still syncing.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Conflict": {
                "value": {
                  "statusCode": 409,
                  "service": "PublicApi",
                  "error": "The data set has not been requested.",
                  "correlationId": "bc997528a9d7abb9161ef45f05d38599",
                  "canBeRetried": "Unknown",
                  "detailedErrorCode": 0
                }
              }
            }
          }
        }
      },
      "Too-Many-Requests": {
        "description": "Too many requests were made in a given amount of time. Wait a short period and then try again.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Conflict": {
                "value": {
                  "statusCode": 429,
                  "service": "PublicApi",
                  "error": "You have made too many requests in a given amount of time; please retry later.",
                  "correlationId": "bc997528a9d7abb9161ef45f05d38599",
                  "canBeRetried": "Unknown",
                  "detailedErrorCode": 0
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "auth_header": {
        "name": "Authorization",
        "description": "The word \"Basic\" followed by a space and your API key. [API keys](https://docs.codat.io/accounting-api#/schemas/apiKeys) are tokens used to control access to the API. You can get an API key via [the Codat Portal](https://app.codat.io/developers/api-keys), via [the API](https://docs.codat.io/codat-api#/api-keys/api-keys-list), or [read more](https://docs.codat.io/using-the-api/authentication) about authentication at Codat.",
        "type": "apiKey",
        "in": "header",
        "x-speakeasy-example": "Basic BASE_64_ENCODED(API_KEY)"
      }
    }
  }
}
